
attiny1617_clk_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d04  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00000dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003090  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002238  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e6a  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005d0  00000000  00000000  00007104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001462  00000000  00000000  000076d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b73  00000000  00000000  00008b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000096a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_3>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62
  88:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  8c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	system_init();
  9c:	0e 94 24 05 	call	0xa48	; 0xa48 <system_init>
}
  a0:	00 00       	nop
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <PORTA_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <PORTA_pin_set_isc+0x6>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <PORTA_pin_set_isc+0x8>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	8b 83       	std	Y+3, r24	; 0x03
  b6:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	80 5f       	subi	r24, 0xF0	; 240
  c0:	9b 4f       	sbci	r25, 0xFB	; 251
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	98 2f       	mov	r25, r24
  d0:	98 7f       	andi	r25, 0xF8	; 248
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	89 2b       	or	r24, r25
  d6:	28 2f       	mov	r18, r24
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	24 96       	adiw	r28, 0x04	; 4
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <PORTA_set_pin_level+0x6>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	88 23       	and	r24, r24
 100:	a9 f0       	breq	.+42     	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
		VPORTA.OUT |= (1 << pin);
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	68 2f       	mov	r22, r24
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	48 2f       	mov	r20, r24
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
 124:	86 2b       	or	r24, r22
 126:	f9 01       	movw	r30, r18
 128:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 12a:	15 c0       	rjmp	.+42     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	81 81       	ldd	r24, Z+1	; 0x01
 138:	68 2f       	mov	r22, r24
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	48 2f       	mov	r20, r24
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	4a 95       	dec	r20
 14c:	e2 f7       	brpl	.-8      	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
 14e:	80 95       	com	r24
 150:	86 23       	and	r24, r22
 152:	f9 01       	movw	r30, r18
 154:	81 83       	std	Z+1, r24	; 0x01
	}
}
 156:	00 00       	nop
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <PORTA_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	89 83       	std	Y+1, r24	; 0x01
	return VPORTA.IN & (1 << pin);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	48 2f       	mov	r20, r24
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <PORTA_get_pin_level+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <PORTA_get_pin_level+0x24>
 18e:	82 23       	and	r24, r18
 190:	93 23       	and	r25, r19
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	89 2b       	or	r24, r25
 196:	09 f4       	brne	.+2      	; 0x19a <PORTA_get_pin_level+0x38>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	82 2f       	mov	r24, r18
}
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <PORTB_set_pin_level+0x6>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 23       	and	r24, r24
 1b6:	a9 f0       	breq	.+42     	; 0x1e2 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	24 e0       	ldi	r18, 0x04	; 4
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	21 81       	ldd	r18, Z+1	; 0x01
 1c4:	62 2f       	mov	r22, r18
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	42 2f       	mov	r20, r18
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <PORTB_set_pin_level+0x32>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <PORTB_set_pin_level+0x2e>
 1da:	26 2b       	or	r18, r22
 1dc:	fc 01       	movw	r30, r24
 1de:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
 1e0:	15 c0       	rjmp	.+42     	; 0x20c <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	24 e0       	ldi	r18, 0x04	; 4
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	21 81       	ldd	r18, Z+1	; 0x01
 1ee:	62 2f       	mov	r22, r18
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	42 2f       	mov	r20, r18
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <PORTB_set_pin_level+0x5c>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	4a 95       	dec	r20
 202:	e2 f7       	brpl	.-8      	; 0x1fc <PORTB_set_pin_level+0x58>
 204:	20 95       	com	r18
 206:	26 23       	and	r18, r22
 208:	fc 01       	movw	r30, r24
 20a:	21 83       	std	Z+1, r18	; 0x01
	}
}
 20c:	00 00       	nop
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	24 e0       	ldi	r18, 0x04	; 4
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	22 81       	ldd	r18, Z+2	; 0x02
 230:	62 2f       	mov	r22, r18
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	42 2f       	mov	r20, r18
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <PORTB_toggle_pin_level+0x2a>
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	4a 95       	dec	r20
 244:	e2 f7       	brpl	.-8      	; 0x23e <PORTB_toggle_pin_level+0x26>
 246:	26 2b       	or	r18, r22
 248:	fc 01       	movw	r30, r24
 24a:	22 83       	std	Z+2, r18	; 0x02
}
 24c:	00 00       	nop
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <PA2_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PA2_set_isc(const PORT_ISC_t isc)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	1f 92       	push	r1
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_isc(2, isc);
 262:	69 81       	ldd	r22, Y+1	; 0x01
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 54 00 	call	0xa8	; 0xa8 <PORTA_pin_set_isc>
}
 26a:	00 00       	nop
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <PA2_get_level>:
 * \brief Get level on PA2
 *
 * Reads the level on a pin
 */
static inline bool PA2_get_level()
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	return PORTA_get_pin_level(2);
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 b1 00 	call	0x162	; 0x162 <PORTA_get_pin_level>
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void EN_set_level(const bool level)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	1f 92       	push	r1
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 294:	69 81       	ldd	r22, Y+1	; 0x01
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 77 00 	call	0xee	; 0xee <PORTA_set_pin_level>
}
 29c:	00 00       	nop
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	1f 92       	push	r1
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(3, level);
 2b2:	69 81       	ldd	r22, Y+1	; 0x01
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <PORTB_set_pin_level>
}
 2ba:	00 00       	nop
 2bc:	0f 90       	pop	r0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LED1_toggle_level>:
 * \brief Toggle output level on LED1
 *
 * Toggle the pin level
 */
static inline void LED1_toggle_level()
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 0c 01 	call	0x218	; 0x218 <PORTB_toggle_pin_level>
}
 2d2:	00 00       	nop
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(4, level);
 2e6:	69 81       	ldd	r22, Y+1	; 0x01
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <PORTB_set_pin_level>
}
 2ee:	00 00       	nop
 2f0:	0f 90       	pop	r0
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <LED3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED3_set_level(const bool level)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	1f 92       	push	r1
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(5, level);
 304:	69 81       	ldd	r22, Y+1	; 0x01
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <PORTB_set_pin_level>
}
 30c:	00 00       	nop
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <ccp_write_io+0x6>
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	9a 83       	std	Y+2, r25	; 0x02
 326:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	9a 81       	ldd	r25, Y+2	; 0x02
 32c:	4b 81       	ldd	r20, Y+3	; 0x03
 32e:	68 ed       	ldi	r22, 0xD8	; 216
 330:	0e 94 54 05 	call	0xaa8	; 0xaa8 <protected_write_io>
}
 334:	00 00       	nop
 336:	23 96       	adiw	r28, 0x03	; 3
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <RSTCTRL_reset>:
#endif

#include <ccp.h>

static inline void RSTCTRL_reset(void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	/* SWRR is protected with CCP */
	ccp_write_io((void *)&RSTCTRL.SWRR, 0x1);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 8b 01 	call	0x316	; 0x316 <ccp_write_io>
}
 354:	00 00       	nop
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <main>:
#include <util/delay.h>
#include "rstctrl.h"
#include <avr/sleep.h>

int main(void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	2f 97       	sbiw	r28, 0x0f	; 15
 366:	cd bf       	out	0x3d, r28	; 61
 368:	de bf       	out	0x3e, r29	; 62
	ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 16MHz Internal Oscillator (OSC16M) */
 36a:	60 e8       	ldi	r22, 0x80	; 128
 36c:	80 e6       	ldi	r24, 0x60	; 96
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 8b 01 	call	0x316	; 0x316 <ccp_write_io>
			 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);
		
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 374:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>

	/* Replace with your application code */
	uint8_t i;
	for (i = 0; i < 10; i++) {
 378:	19 82       	std	Y+1, r1	; 0x01
 37a:	77 c0       	rjmp	.+238    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	aa ef       	ldi	r26, 0xFA	; 250
 382:	b3 e4       	ldi	r27, 0x43	; 67
 384:	8a 83       	std	Y+2, r24	; 0x02
 386:	9b 83       	std	Y+3, r25	; 0x03
 388:	ac 83       	std	Y+4, r26	; 0x04
 38a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	4a e7       	ldi	r20, 0x7A	; 122
 392:	55 e4       	ldi	r21, 0x45	; 69
 394:	6a 81       	ldd	r22, Y+2	; 0x02
 396:	7b 81       	ldd	r23, Y+3	; 0x03
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	9d 81       	ldd	r25, Y+5	; 0x05
 39c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__mulsf3>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	8e 83       	std	Y+6, r24	; 0x06
 3a6:	9f 83       	std	Y+7, r25	; 0x07
 3a8:	a8 87       	std	Y+8, r26	; 0x08
 3aa:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e8       	ldi	r20, 0x80	; 128
 3b2:	5f e3       	ldi	r21, 0x3F	; 63
 3b4:	6e 81       	ldd	r22, Y+6	; 0x06
 3b6:	7f 81       	ldd	r23, Y+7	; 0x07
 3b8:	88 85       	ldd	r24, Y+8	; 0x08
 3ba:	99 85       	ldd	r25, Y+9	; 0x09
 3bc:	0e 94 65 05 	call	0xaca	; 0xaca <__cmpsf2>
 3c0:	88 23       	and	r24, r24
 3c2:	2c f4       	brge	.+10     	; 0x3ce <main+0x72>
		__ticks = 1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8a 87       	std	Y+10, r24	; 0x0a
 3ca:	9b 87       	std	Y+11, r25	; 0x0b
 3cc:	3f c0       	rjmp	.+126    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	else if (__tmp > 65535)
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	3f ef       	ldi	r19, 0xFF	; 255
 3d2:	4f e7       	ldi	r20, 0x7F	; 127
 3d4:	57 e4       	ldi	r21, 0x47	; 71
 3d6:	6e 81       	ldd	r22, Y+6	; 0x06
 3d8:	7f 81       	ldd	r23, Y+7	; 0x07
 3da:	88 85       	ldd	r24, Y+8	; 0x08
 3dc:	99 85       	ldd	r25, Y+9	; 0x09
 3de:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__gesf2>
 3e2:	18 16       	cp	r1, r24
 3e4:	4c f5       	brge	.+82     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 e2       	ldi	r20, 0x20	; 32
 3ec:	51 e4       	ldi	r21, 0x41	; 65
 3ee:	6a 81       	ldd	r22, Y+2	; 0x02
 3f0:	7b 81       	ldd	r23, Y+3	; 0x03
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	9d 81       	ldd	r25, Y+5	; 0x05
 3f6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__mulsf3>
 3fa:	dc 01       	movw	r26, r24
 3fc:	cb 01       	movw	r24, r22
 3fe:	bc 01       	movw	r22, r24
 400:	cd 01       	movw	r24, r26
 402:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fixunssfsi>
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22
 40a:	8a 87       	std	Y+10, r24	; 0x0a
 40c:	9b 87       	std	Y+11, r25	; 0x0b
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 410:	80 e9       	ldi	r24, 0x90	; 144
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	8c 87       	std	Y+12, r24	; 0x0c
 416:	9d 87       	std	Y+13, r25	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 418:	8c 85       	ldd	r24, Y+12	; 0x0c
 41a:	9d 85       	ldd	r25, Y+13	; 0x0d
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	8c 87       	std	Y+12, r24	; 0x0c
 422:	9d 87       	std	Y+13, r25	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 424:	8a 85       	ldd	r24, Y+10	; 0x0a
 426:	9b 85       	ldd	r25, Y+11	; 0x0b
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	8a 87       	std	Y+10, r24	; 0x0a
 42c:	9b 87       	std	Y+11, r25	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42e:	8a 85       	ldd	r24, Y+10	; 0x0a
 430:	9b 85       	ldd	r25, Y+11	; 0x0b
 432:	89 2b       	or	r24, r25
 434:	69 f7       	brne	.-38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 436:	14 c0       	rjmp	.+40     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 438:	6e 81       	ldd	r22, Y+6	; 0x06
 43a:	7f 81       	ldd	r23, Y+7	; 0x07
 43c:	88 85       	ldd	r24, Y+8	; 0x08
 43e:	99 85       	ldd	r25, Y+9	; 0x09
 440:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fixunssfsi>
 444:	dc 01       	movw	r26, r24
 446:	cb 01       	movw	r24, r22
 448:	8a 87       	std	Y+10, r24	; 0x0a
 44a:	9b 87       	std	Y+11, r25	; 0x0b
 44c:	8a 85       	ldd	r24, Y+10	; 0x0a
 44e:	9b 85       	ldd	r25, Y+11	; 0x0b
 450:	8e 87       	std	Y+14, r24	; 0x0e
 452:	9f 87       	std	Y+15, r25	; 0x0f
 454:	8e 85       	ldd	r24, Y+14	; 0x0e
 456:	9f 85       	ldd	r25, Y+15	; 0x0f
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	8e 87       	std	Y+14, r24	; 0x0e
 45e:	9f 87       	std	Y+15, r25	; 0x0f
		_delay_ms(500);
		LED1_toggle_level();	
 460:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED1_toggle_level>
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();

	/* Replace with your application code */
	uint8_t i;
	for (i = 0; i < 10; i++) {
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	8a 30       	cpi	r24, 0x0A	; 10
 46e:	08 f4       	brcc	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	85 cf       	rjmp	.-246    	; 0x37c <main+0x20>
		_delay_ms(500);
		LED1_toggle_level();	
	}
	LED1_set_level(false);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED1_set_level>
	LED2_set_level(false);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 6d 01 	call	0x2da	; 0x2da <LED2_set_level>
	LED3_set_level(false);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED3_set_level>
	if(PORTA_INTFLAGS & 0x04)PORTA_INTFLAGS|=0x04;
 484:	89 e0       	ldi	r24, 0x09	; 9
 486:	94 e0       	ldi	r25, 0x04	; 4
 488:	fc 01       	movw	r30, r24
 48a:	80 81       	ld	r24, Z
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	84 70       	andi	r24, 0x04	; 4
 492:	99 27       	eor	r25, r25
 494:	89 2b       	or	r24, r25
 496:	49 f0       	breq	.+18     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 498:	89 e0       	ldi	r24, 0x09	; 9
 49a:	94 e0       	ldi	r25, 0x04	; 4
 49c:	29 e0       	ldi	r18, 0x09	; 9
 49e:	34 e0       	ldi	r19, 0x04	; 4
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	24 60       	ori	r18, 0x04	; 4
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	PA2_set_isc(PORT_ISC_LEVEL_gc);
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	0e 94 2b 01 	call	0x256	; 0x256 <PA2_set_isc>
	
	EN_set_level(false);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 44 01 	call	0x288	; 0x288 <EN_set_level>
	sleep_mode();
 4b6:	80 e5       	ldi	r24, 0x50	; 80
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	20 e5       	ldi	r18, 0x50	; 80
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	21 60       	ori	r18, 0x01	; 1
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	88 95       	sleep
 4ca:	80 e5       	ldi	r24, 0x50	; 80
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	20 e5       	ldi	r18, 0x50	; 80
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	2e 7f       	andi	r18, 0xFE	; 254
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18

	while (1) {
	}
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>

000004de <__vector_3>:
}

ISR(PORTA_PORT_vect)
{
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
	if(PORTA_INTFLAGS & 0x04){
 50a:	89 e0       	ldi	r24, 0x09	; 9
 50c:	94 e0       	ldi	r25, 0x04	; 4
 50e:	fc 01       	movw	r30, r24
 510:	80 81       	ld	r24, Z
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	84 70       	andi	r24, 0x04	; 4
 518:	99 27       	eor	r25, r25
 51a:	89 2b       	or	r24, r25
 51c:	91 f0       	breq	.+36     	; 0x542 <__vector_3+0x64>
		PORTA_INTFLAGS|=0x04;
 51e:	89 e0       	ldi	r24, 0x09	; 9
 520:	94 e0       	ldi	r25, 0x04	; 4
 522:	29 e0       	ldi	r18, 0x09	; 9
 524:	34 e0       	ldi	r19, 0x04	; 4
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	24 60       	ori	r18, 0x04	; 4
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
		if (PA2_get_level() == false) {
 530:	0e 94 3a 01 	call	0x274	; 0x274 <PA2_get_level>
 534:	98 2f       	mov	r25, r24
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 27       	eor	r24, r25
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__vector_3+0x64>
			RSTCTRL_reset();
 53e:	0e 94 a1 01 	call	0x342	; 0x342 <RSTCTRL_reset>
		}
	}

	PORTA_INTFLAGS = 0xFF;
 542:	89 e0       	ldi	r24, 0x09	; 9
 544:	94 e0       	ldi	r25, 0x04	; 4
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
 54c:	00 00       	nop
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 57e:	80 e0       	ldi	r24, 0x00	; 0
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	00 d0       	rcall	.+0      	; 0x58c <ccp_write_io+0x6>
 58c:	1f 92       	push	r1
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	9a 83       	std	Y+2, r25	; 0x02
 596:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	9a 81       	ldd	r25, Y+2	; 0x02
 59c:	4b 81       	ldd	r20, Y+3	; 0x03
 59e:	68 ed       	ldi	r22, 0xD8	; 216
 5a0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <protected_write_io>
}
 5a4:	00 00       	nop
 5a6:	23 96       	adiw	r28, 0x03	; 3
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
 5ba:	60 e1       	ldi	r22, 0x10	; 16
 5bc:	81 e6       	ldi	r24, 0x61	; 97
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 c3 02 	call	0x586	; 0x586 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 16MHz Internal Oscillator (OSC16M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 5d4:	78 94       	sei

	return 0;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
}
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <PORTA_set_pin_pull_mode+0x6>
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <PORTA_set_pin_pull_mode+0x8>
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	8b 83       	std	Y+3, r24	; 0x03
 5ec:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	80 5f       	subi	r24, 0xF0	; 240
 5f6:	9b 4f       	sbci	r25, 0xFB	; 251
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	59 f4       	brne	.+22     	; 0x618 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	9a 81       	ldd	r25, Y+2	; 0x02
 606:	fc 01       	movw	r30, r24
 608:	80 81       	ld	r24, Z
 60a:	28 2f       	mov	r18, r24
 60c:	28 60       	ori	r18, 0x08	; 8
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
 616:	0d c0       	rjmp	.+26     	; 0x632 <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	88 23       	and	r24, r24
 61c:	51 f4       	brne	.+20     	; 0x632 <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	9a 81       	ldd	r25, Y+2	; 0x02
 622:	fc 01       	movw	r30, r24
 624:	80 81       	ld	r24, Z
 626:	28 2f       	mov	r18, r24
 628:	27 7f       	andi	r18, 0xF7	; 247
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	fc 01       	movw	r30, r24
 630:	20 83       	st	Z, r18
	}
}
 632:	00 00       	nop
 634:	24 96       	adiw	r28, 0x04	; 4
 636:	cd bf       	out	0x3d, r28	; 61
 638:	de bf       	out	0x3e, r29	; 62
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	00 d0       	rcall	.+0      	; 0x646 <PORTA_set_pin_dir+0x6>
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	91 05       	cpc	r25, r1
 658:	e1 f0       	breq	.+56     	; 0x692 <PORTA_set_pin_dir+0x52>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	91 05       	cpc	r25, r1
 65e:	71 f1       	breq	.+92     	; 0x6bc <PORTA_set_pin_dir+0x7c>
 660:	89 2b       	or	r24, r25
 662:	09 f0       	breq	.+2      	; 0x666 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 664:	3b c0       	rjmp	.+118    	; 0x6dc <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	fc 01       	movw	r30, r24
 670:	80 81       	ld	r24, Z
 672:	68 2f       	mov	r22, r24
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	48 2f       	mov	r20, r24
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <PORTA_set_pin_dir+0x44>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	4a 95       	dec	r20
 686:	e2 f7       	brpl	.-8      	; 0x680 <PORTA_set_pin_dir+0x40>
 688:	80 95       	com	r24
 68a:	86 23       	and	r24, r22
 68c:	f9 01       	movw	r30, r18
 68e:	80 83       	st	Z, r24
		break;
 690:	25 c0       	rjmp	.+74     	; 0x6dc <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	68 2f       	mov	r22, r24
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	48 2f       	mov	r20, r24
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <PORTA_set_pin_dir+0x70>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	4a 95       	dec	r20
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <PORTA_set_pin_dir+0x6c>
 6b4:	86 2b       	or	r24, r22
 6b6:	f9 01       	movw	r30, r18
 6b8:	80 83       	st	Z, r24
		break;
 6ba:	10 c0       	rjmp	.+32     	; 0x6dc <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	88 2f       	mov	r24, r24
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	80 5f       	subi	r24, 0xF0	; 240
 6c4:	9b 4f       	sbci	r25, 0xFB	; 251
 6c6:	29 81       	ldd	r18, Y+1	; 0x01
 6c8:	22 2f       	mov	r18, r18
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	20 5f       	subi	r18, 0xF0	; 240
 6ce:	3b 4f       	sbci	r19, 0xFB	; 251
 6d0:	f9 01       	movw	r30, r18
 6d2:	20 81       	ld	r18, Z
 6d4:	28 60       	ori	r18, 0x08	; 8
 6d6:	fc 01       	movw	r30, r24
 6d8:	20 83       	st	Z, r18
		break;
 6da:	00 00       	nop
	default:
		break;
	}
}
 6dc:	00 00       	nop
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <PORTA_set_pin_level+0x6>
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	88 23       	and	r24, r24
 6fa:	a9 f0       	breq	.+42     	; 0x726 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	fc 01       	movw	r30, r24
 706:	81 81       	ldd	r24, Z+1	; 0x01
 708:	68 2f       	mov	r22, r24
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	48 2f       	mov	r20, r24
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <PORTA_set_pin_level+0x32>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	4a 95       	dec	r20
 71c:	e2 f7       	brpl	.-8      	; 0x716 <PORTA_set_pin_level+0x2e>
 71e:	86 2b       	or	r24, r22
 720:	f9 01       	movw	r30, r18
 722:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 724:	15 c0       	rjmp	.+42     	; 0x750 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	fc 01       	movw	r30, r24
 730:	81 81       	ldd	r24, Z+1	; 0x01
 732:	68 2f       	mov	r22, r24
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	48 2f       	mov	r20, r24
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <PORTA_set_pin_level+0x5c>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	4a 95       	dec	r20
 746:	e2 f7       	brpl	.-8      	; 0x740 <PORTA_set_pin_level+0x58>
 748:	80 95       	com	r24
 74a:	86 23       	and	r24, r22
 74c:	f9 01       	movw	r30, r18
 74e:	81 83       	std	Z+1, r24	; 0x01
	}
}
 750:	00 00       	nop
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	00 d0       	rcall	.+0      	; 0x762 <PORTB_set_pin_dir+0x6>
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 76a:	8a 81       	ldd	r24, Y+2	; 0x02
 76c:	88 2f       	mov	r24, r24
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	91 05       	cpc	r25, r1
 774:	e1 f0       	breq	.+56     	; 0x7ae <PORTB_set_pin_dir+0x52>
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	91 05       	cpc	r25, r1
 77a:	71 f1       	breq	.+92     	; 0x7d8 <PORTB_set_pin_dir+0x7c>
 77c:	89 2b       	or	r24, r25
 77e:	09 f0       	breq	.+2      	; 0x782 <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 780:	3b c0       	rjmp	.+118    	; 0x7f8 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 782:	84 e0       	ldi	r24, 0x04	; 4
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	24 e0       	ldi	r18, 0x04	; 4
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	f9 01       	movw	r30, r18
 78c:	20 81       	ld	r18, Z
 78e:	62 2f       	mov	r22, r18
 790:	29 81       	ldd	r18, Y+1	; 0x01
 792:	42 2f       	mov	r20, r18
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <PORTB_set_pin_dir+0x44>
 79c:	22 0f       	add	r18, r18
 79e:	33 1f       	adc	r19, r19
 7a0:	4a 95       	dec	r20
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <PORTB_set_pin_dir+0x40>
 7a4:	20 95       	com	r18
 7a6:	26 23       	and	r18, r22
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
		break;
 7ac:	25 c0       	rjmp	.+74     	; 0x7f8 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	24 e0       	ldi	r18, 0x04	; 4
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	f9 01       	movw	r30, r18
 7b8:	20 81       	ld	r18, Z
 7ba:	62 2f       	mov	r22, r18
 7bc:	29 81       	ldd	r18, Y+1	; 0x01
 7be:	42 2f       	mov	r20, r18
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <PORTB_set_pin_dir+0x70>
 7c8:	22 0f       	add	r18, r18
 7ca:	33 1f       	adc	r19, r19
 7cc:	4a 95       	dec	r20
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <PORTB_set_pin_dir+0x6c>
 7d0:	26 2b       	or	r18, r22
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18
		break;
 7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	88 2f       	mov	r24, r24
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	80 5d       	subi	r24, 0xD0	; 208
 7e0:	9b 4f       	sbci	r25, 0xFB	; 251
 7e2:	29 81       	ldd	r18, Y+1	; 0x01
 7e4:	22 2f       	mov	r18, r18
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	20 5d       	subi	r18, 0xD0	; 208
 7ea:	3b 4f       	sbci	r19, 0xFB	; 251
 7ec:	f9 01       	movw	r30, r18
 7ee:	20 81       	ld	r18, Z
 7f0:	28 60       	ori	r18, 0x08	; 8
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 83       	st	Z, r18
		break;
 7f6:	00 00       	nop
	default:
		break;
	}
}
 7f8:	00 00       	nop
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	00 d0       	rcall	.+0      	; 0x80a <PORTB_set_pin_level+0x6>
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	89 83       	std	Y+1, r24	; 0x01
 810:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	88 23       	and	r24, r24
 816:	a9 f0       	breq	.+42     	; 0x842 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	24 e0       	ldi	r18, 0x04	; 4
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	f9 01       	movw	r30, r18
 822:	21 81       	ldd	r18, Z+1	; 0x01
 824:	62 2f       	mov	r22, r18
 826:	29 81       	ldd	r18, Y+1	; 0x01
 828:	42 2f       	mov	r20, r18
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <PORTB_set_pin_level+0x32>
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	4a 95       	dec	r20
 838:	e2 f7       	brpl	.-8      	; 0x832 <PORTB_set_pin_level+0x2e>
 83a:	26 2b       	or	r18, r22
 83c:	fc 01       	movw	r30, r24
 83e:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
 840:	15 c0       	rjmp	.+42     	; 0x86c <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	24 e0       	ldi	r18, 0x04	; 4
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	f9 01       	movw	r30, r18
 84c:	21 81       	ldd	r18, Z+1	; 0x01
 84e:	62 2f       	mov	r22, r18
 850:	29 81       	ldd	r18, Y+1	; 0x01
 852:	42 2f       	mov	r20, r18
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	21 e0       	ldi	r18, 0x01	; 1
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	02 c0       	rjmp	.+4      	; 0x860 <PORTB_set_pin_level+0x5c>
 85c:	22 0f       	add	r18, r18
 85e:	33 1f       	adc	r19, r19
 860:	4a 95       	dec	r20
 862:	e2 f7       	brpl	.-8      	; 0x85c <PORTB_set_pin_level+0x58>
 864:	20 95       	com	r18
 866:	26 23       	and	r18, r22
 868:	fc 01       	movw	r30, r24
 86a:	21 83       	std	Z+1, r18	; 0x01
	}
}
 86c:	00 00       	nop
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <PA2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA2_set_pull_mode(const enum port_pull_mode pull_mode)
{
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	1f 92       	push	r1
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
 884:	69 81       	ldd	r22, Y+1	; 0x01
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	0e 94 ef 02 	call	0x5de	; 0x5de <PORTA_set_pin_pull_mode>
}
 88c:	00 00       	nop
 88e:	0f 90       	pop	r0
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	1f 92       	push	r1
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
 8a2:	69 81       	ldd	r22, Y+1	; 0x01
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	0e 94 20 03 	call	0x640	; 0x640 <PORTA_set_pin_dir>
}
 8aa:	00 00       	nop
 8ac:	0f 90       	pop	r0
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <EN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void EN_set_dir(const enum port_dir dir)
{
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	1f 92       	push	r1
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 8c0:	69 81       	ldd	r22, Y+1	; 0x01
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	0e 94 20 03 	call	0x640	; 0x640 <PORTA_set_pin_dir>
}
 8c8:	00 00       	nop
 8ca:	0f 90       	pop	r0
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void EN_set_level(const bool level)
{
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	1f 92       	push	r1
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 8de:	69 81       	ldd	r22, Y+1	; 0x01
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <PORTA_set_pin_level>
}
 8e6:	00 00       	nop
 8e8:	0f 90       	pop	r0
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <LED1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED1_set_dir(const enum port_dir dir)
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	1f 92       	push	r1
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(3, dir);
 8fc:	69 81       	ldd	r22, Y+1	; 0x01
 8fe:	83 e0       	ldi	r24, 0x03	; 3
 900:	0e 94 ae 03 	call	0x75c	; 0x75c <PORTB_set_pin_dir>
}
 904:	00 00       	nop
 906:	0f 90       	pop	r0
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	08 95       	ret

0000090e <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	1f 92       	push	r1
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(3, level);
 91a:	69 81       	ldd	r22, Y+1	; 0x01
 91c:	83 e0       	ldi	r24, 0x03	; 3
 91e:	0e 94 02 04 	call	0x804	; 0x804 <PORTB_set_pin_level>
}
 922:	00 00       	nop
 924:	0f 90       	pop	r0
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	08 95       	ret

0000092c <LED2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED2_set_dir(const enum port_dir dir)
{
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	1f 92       	push	r1
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
 936:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(4, dir);
 938:	69 81       	ldd	r22, Y+1	; 0x01
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	0e 94 ae 03 	call	0x75c	; 0x75c <PORTB_set_pin_dir>
}
 940:	00 00       	nop
 942:	0f 90       	pop	r0
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	1f 92       	push	r1
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(4, level);
 956:	69 81       	ldd	r22, Y+1	; 0x01
 958:	84 e0       	ldi	r24, 0x04	; 4
 95a:	0e 94 02 04 	call	0x804	; 0x804 <PORTB_set_pin_level>
}
 95e:	00 00       	nop
 960:	0f 90       	pop	r0
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	08 95       	ret

00000968 <LED3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED3_set_dir(const enum port_dir dir)
{
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	1f 92       	push	r1
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(5, dir);
 974:	69 81       	ldd	r22, Y+1	; 0x01
 976:	85 e0       	ldi	r24, 0x05	; 5
 978:	0e 94 ae 03 	call	0x75c	; 0x75c <PORTB_set_pin_dir>
}
 97c:	00 00       	nop
 97e:	0f 90       	pop	r0
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	08 95       	ret

00000986 <LED3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED3_set_level(const bool level)
{
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	1f 92       	push	r1
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(5, level);
 992:	69 81       	ldd	r22, Y+1	; 0x01
 994:	85 e0       	ldi	r24, 0x05	; 5
 996:	0e 94 02 04 	call	0x804	; 0x804 <PORTB_set_pin_level>
}
 99a:	00 00       	nop
 99c:	0f 90       	pop	r0
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <mcu_init+0x6>
 9aa:	1f 92       	push	r1
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 9b0:	19 82       	std	Y+1, r1	; 0x01
 9b2:	12 c0       	rjmp	.+36     	; 0x9d8 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	88 2f       	mov	r24, r24
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	80 5f       	subi	r24, 0xF0	; 240
 9bc:	9b 4f       	sbci	r25, 0xFB	; 251
 9be:	29 81       	ldd	r18, Y+1	; 0x01
 9c0:	22 2f       	mov	r18, r18
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	20 5f       	subi	r18, 0xF0	; 240
 9c6:	3b 4f       	sbci	r19, 0xFB	; 251
 9c8:	f9 01       	movw	r30, r18
 9ca:	20 81       	ld	r18, Z
 9cc:	28 60       	ori	r18, 0x08	; 8
 9ce:	fc 01       	movw	r30, r24
 9d0:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	8f 5f       	subi	r24, 0xFF	; 255
 9d6:	89 83       	std	Y+1, r24	; 0x01
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	88 30       	cpi	r24, 0x08	; 8
 9dc:	58 f3       	brcs	.-42     	; 0x9b4 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 9de:	1a 82       	std	Y+2, r1	; 0x02
 9e0:	12 c0       	rjmp	.+36     	; 0xa06 <mcu_init+0x62>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	88 2f       	mov	r24, r24
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	80 5d       	subi	r24, 0xD0	; 208
 9ea:	9b 4f       	sbci	r25, 0xFB	; 251
 9ec:	2a 81       	ldd	r18, Y+2	; 0x02
 9ee:	22 2f       	mov	r18, r18
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	20 5d       	subi	r18, 0xD0	; 208
 9f4:	3b 4f       	sbci	r19, 0xFB	; 251
 9f6:	f9 01       	movw	r30, r18
 9f8:	20 81       	ld	r18, Z
 9fa:	28 60       	ori	r18, 0x08	; 8
 9fc:	fc 01       	movw	r30, r24
 9fe:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	8f 5f       	subi	r24, 0xFF	; 255
 a04:	8a 83       	std	Y+2, r24	; 0x02
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	88 30       	cpi	r24, 0x08	; 8
 a0a:	58 f3       	brcs	.-42     	; 0x9e2 <mcu_init+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a0c:	1b 82       	std	Y+3, r1	; 0x03
 a0e:	12 c0       	rjmp	.+36     	; 0xa34 <mcu_init+0x90>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	88 2f       	mov	r24, r24
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	80 5b       	subi	r24, 0xB0	; 176
 a18:	9b 4f       	sbci	r25, 0xFB	; 251
 a1a:	2b 81       	ldd	r18, Y+3	; 0x03
 a1c:	22 2f       	mov	r18, r18
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	20 5b       	subi	r18, 0xB0	; 176
 a22:	3b 4f       	sbci	r19, 0xFB	; 251
 a24:	f9 01       	movw	r30, r18
 a26:	20 81       	ld	r18, Z
 a28:	28 60       	ori	r18, 0x08	; 8
 a2a:	fc 01       	movw	r30, r24
 a2c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a2e:	8b 81       	ldd	r24, Y+3	; 0x03
 a30:	8f 5f       	subi	r24, 0xFF	; 255
 a32:	8b 83       	std	Y+3, r24	; 0x03
 a34:	8b 81       	ldd	r24, Y+3	; 0x03
 a36:	88 30       	cpi	r24, 0x08	; 8
 a38:	58 f3       	brcs	.-42     	; 0xa10 <mcu_init+0x6c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 a3a:	00 00       	nop
 a3c:	23 96       	adiw	r28, 0x03	; 3
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	de bf       	out	0x3e, r29	; 62
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 a50:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <mcu_init>

	/* PORT setting on PA2 */

	// Set pin direction to input
	PA2_set_dir(PORT_DIR_IN);
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	0e 94 4b 04 	call	0x896	; 0x896 <PA2_set_dir>

	PA2_set_pull_mode(
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	0e 94 3c 04 	call	0x878	; 0x878 <PA2_set_pull_mode>

	/* PORT setting on PA3 */

	// Set pin direction to output

	EN_set_level(
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	0e 94 69 04 	call	0x8d2	; 0x8d2 <EN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	EN_set_dir(PORT_DIR_OUT);
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <EN_set_dir>

	CLKCTRL_init();
 a6c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <CLKCTRL_init>

	/* PORT setting on PB3 */

	// Set pin direction to output

	LED1_set_level(
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	0e 94 87 04 	call	0x90e	; 0x90e <LED1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED1_set_dir(PORT_DIR_OUT);
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LED1_set_dir>

	/* PORT setting on PB4 */

	// Set pin direction to output

	LED2_set_level(
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	0e 94 a5 04 	call	0x94a	; 0x94a <LED2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED2_set_dir(PORT_DIR_OUT);
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	0e 94 96 04 	call	0x92c	; 0x92c <LED2_set_dir>

	/* PORT setting on PB5 */

	// Set pin direction to output

	LED3_set_level(
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	0e 94 c3 04 	call	0x986	; 0x986 <LED3_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED3_set_dir(PORT_DIR_OUT);
 a8e:	81 e0       	ldi	r24, 0x01	; 1
 a90:	0e 94 b4 04 	call	0x968	; 0x968 <LED3_set_dir>


	CPUINT_init();
 a94:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CPUINT_init>

	SLPCTRL_init();
 a98:	0e 94 58 05 	call	0xab0	; 0xab0 <SLPCTRL_init>

	BOD_init();
 a9c:	0e 94 bb 02 	call	0x576	; 0x576 <BOD_init>
}
 aa0:	00 00       	nop
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	08 95       	ret

00000aa8 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 aa8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 aaa:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 aac:	40 83       	st	Z, r20
	ret                             // Return to caller
 aae:	08 95       	ret

00000ab0 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
 ab8:	80 e5       	ldi	r24, 0x50	; 80
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	23 e0       	ldi	r18, 0x03	; 3
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
	                | SLPCTRL_SMODE_STDBY_gc; /* Standby Mode */

	return 0;
 ac2:	80 e0       	ldi	r24, 0x00	; 0
}
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <__cmpsf2>:
 aca:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_cmp>
 ace:	08 f4       	brcc	.+2      	; 0xad2 <__cmpsf2+0x8>
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	08 95       	ret

00000ad4 <__fixunssfsi>:
 ad4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_splitA>
 ad8:	88 f0       	brcs	.+34     	; 0xafc <__fixunssfsi+0x28>
 ada:	9f 57       	subi	r25, 0x7F	; 127
 adc:	98 f0       	brcs	.+38     	; 0xb04 <__fixunssfsi+0x30>
 ade:	b9 2f       	mov	r27, r25
 ae0:	99 27       	eor	r25, r25
 ae2:	b7 51       	subi	r27, 0x17	; 23
 ae4:	b0 f0       	brcs	.+44     	; 0xb12 <__fixunssfsi+0x3e>
 ae6:	e1 f0       	breq	.+56     	; 0xb20 <__fixunssfsi+0x4c>
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	99 1f       	adc	r25, r25
 af0:	1a f0       	brmi	.+6      	; 0xaf8 <__fixunssfsi+0x24>
 af2:	ba 95       	dec	r27
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__fixunssfsi+0x14>
 af6:	14 c0       	rjmp	.+40     	; 0xb20 <__fixunssfsi+0x4c>
 af8:	b1 30       	cpi	r27, 0x01	; 1
 afa:	91 f0       	breq	.+36     	; 0xb20 <__fixunssfsi+0x4c>
 afc:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fp_zero>
 b00:	b1 e0       	ldi	r27, 0x01	; 1
 b02:	08 95       	ret
 b04:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_zero>
 b08:	67 2f       	mov	r22, r23
 b0a:	78 2f       	mov	r23, r24
 b0c:	88 27       	eor	r24, r24
 b0e:	b8 5f       	subi	r27, 0xF8	; 248
 b10:	39 f0       	breq	.+14     	; 0xb20 <__fixunssfsi+0x4c>
 b12:	b9 3f       	cpi	r27, 0xF9	; 249
 b14:	cc f3       	brlt	.-14     	; 0xb08 <__fixunssfsi+0x34>
 b16:	86 95       	lsr	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	b3 95       	inc	r27
 b1e:	d9 f7       	brne	.-10     	; 0xb16 <__fixunssfsi+0x42>
 b20:	3e f4       	brtc	.+14     	; 0xb30 <__fixunssfsi+0x5c>
 b22:	90 95       	com	r25
 b24:	80 95       	com	r24
 b26:	70 95       	com	r23
 b28:	61 95       	neg	r22
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	08 95       	ret

00000b32 <__fp_cmp>:
 b32:	99 0f       	add	r25, r25
 b34:	00 08       	sbc	r0, r0
 b36:	55 0f       	add	r21, r21
 b38:	aa 0b       	sbc	r26, r26
 b3a:	e0 e8       	ldi	r30, 0x80	; 128
 b3c:	fe ef       	ldi	r31, 0xFE	; 254
 b3e:	16 16       	cp	r1, r22
 b40:	17 06       	cpc	r1, r23
 b42:	e8 07       	cpc	r30, r24
 b44:	f9 07       	cpc	r31, r25
 b46:	c0 f0       	brcs	.+48     	; 0xb78 <__fp_cmp+0x46>
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	e4 07       	cpc	r30, r20
 b4e:	f5 07       	cpc	r31, r21
 b50:	98 f0       	brcs	.+38     	; 0xb78 <__fp_cmp+0x46>
 b52:	62 1b       	sub	r22, r18
 b54:	73 0b       	sbc	r23, r19
 b56:	84 0b       	sbc	r24, r20
 b58:	95 0b       	sbc	r25, r21
 b5a:	39 f4       	brne	.+14     	; 0xb6a <__fp_cmp+0x38>
 b5c:	0a 26       	eor	r0, r26
 b5e:	61 f0       	breq	.+24     	; 0xb78 <__fp_cmp+0x46>
 b60:	23 2b       	or	r18, r19
 b62:	24 2b       	or	r18, r20
 b64:	25 2b       	or	r18, r21
 b66:	21 f4       	brne	.+8      	; 0xb70 <__fp_cmp+0x3e>
 b68:	08 95       	ret
 b6a:	0a 26       	eor	r0, r26
 b6c:	09 f4       	brne	.+2      	; 0xb70 <__fp_cmp+0x3e>
 b6e:	a1 40       	sbci	r26, 0x01	; 1
 b70:	a6 95       	lsr	r26
 b72:	8f ef       	ldi	r24, 0xFF	; 255
 b74:	81 1d       	adc	r24, r1
 b76:	81 1d       	adc	r24, r1
 b78:	08 95       	ret

00000b7a <__fp_split3>:
 b7a:	57 fd       	sbrc	r21, 7
 b7c:	90 58       	subi	r25, 0x80	; 128
 b7e:	44 0f       	add	r20, r20
 b80:	55 1f       	adc	r21, r21
 b82:	59 f0       	breq	.+22     	; 0xb9a <__fp_splitA+0x10>
 b84:	5f 3f       	cpi	r21, 0xFF	; 255
 b86:	71 f0       	breq	.+28     	; 0xba4 <__fp_splitA+0x1a>
 b88:	47 95       	ror	r20

00000b8a <__fp_splitA>:
 b8a:	88 0f       	add	r24, r24
 b8c:	97 fb       	bst	r25, 7
 b8e:	99 1f       	adc	r25, r25
 b90:	61 f0       	breq	.+24     	; 0xbaa <__fp_splitA+0x20>
 b92:	9f 3f       	cpi	r25, 0xFF	; 255
 b94:	79 f0       	breq	.+30     	; 0xbb4 <__fp_splitA+0x2a>
 b96:	87 95       	ror	r24
 b98:	08 95       	ret
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	14 06       	cpc	r1, r20
 ba0:	55 1f       	adc	r21, r21
 ba2:	f2 cf       	rjmp	.-28     	; 0xb88 <__fp_split3+0xe>
 ba4:	46 95       	lsr	r20
 ba6:	f1 df       	rcall	.-30     	; 0xb8a <__fp_splitA>
 ba8:	08 c0       	rjmp	.+16     	; 0xbba <__fp_splitA+0x30>
 baa:	16 16       	cp	r1, r22
 bac:	17 06       	cpc	r1, r23
 bae:	18 06       	cpc	r1, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	f1 cf       	rjmp	.-30     	; 0xb96 <__fp_splitA+0xc>
 bb4:	86 95       	lsr	r24
 bb6:	71 05       	cpc	r23, r1
 bb8:	61 05       	cpc	r22, r1
 bba:	08 94       	sec
 bbc:	08 95       	ret

00000bbe <__fp_zero>:
 bbe:	e8 94       	clt

00000bc0 <__fp_szero>:
 bc0:	bb 27       	eor	r27, r27
 bc2:	66 27       	eor	r22, r22
 bc4:	77 27       	eor	r23, r23
 bc6:	cb 01       	movw	r24, r22
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__gesf2>:
 bcc:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_cmp>
 bd0:	08 f4       	brcc	.+2      	; 0xbd4 <__gesf2+0x8>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__mulsf3>:
 bd6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__mulsf3x>
 bda:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_round>
 bde:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscA>
 be2:	38 f0       	brcs	.+14     	; 0xbf2 <__mulsf3+0x1c>
 be4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_pscB>
 be8:	20 f0       	brcs	.+8      	; 0xbf2 <__mulsf3+0x1c>
 bea:	95 23       	and	r25, r21
 bec:	11 f0       	breq	.+4      	; 0xbf2 <__mulsf3+0x1c>
 bee:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_inf>
 bf2:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_nan>
 bf6:	11 24       	eor	r1, r1
 bf8:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_szero>

00000bfc <__mulsf3x>:
 bfc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_split3>
 c00:	70 f3       	brcs	.-36     	; 0xbde <__mulsf3+0x8>

00000c02 <__mulsf3_pse>:
 c02:	95 9f       	mul	r25, r21
 c04:	c1 f3       	breq	.-16     	; 0xbf6 <__mulsf3+0x20>
 c06:	95 0f       	add	r25, r21
 c08:	50 e0       	ldi	r21, 0x00	; 0
 c0a:	55 1f       	adc	r21, r21
 c0c:	62 9f       	mul	r22, r18
 c0e:	f0 01       	movw	r30, r0
 c10:	72 9f       	mul	r23, r18
 c12:	bb 27       	eor	r27, r27
 c14:	f0 0d       	add	r31, r0
 c16:	b1 1d       	adc	r27, r1
 c18:	63 9f       	mul	r22, r19
 c1a:	aa 27       	eor	r26, r26
 c1c:	f0 0d       	add	r31, r0
 c1e:	b1 1d       	adc	r27, r1
 c20:	aa 1f       	adc	r26, r26
 c22:	64 9f       	mul	r22, r20
 c24:	66 27       	eor	r22, r22
 c26:	b0 0d       	add	r27, r0
 c28:	a1 1d       	adc	r26, r1
 c2a:	66 1f       	adc	r22, r22
 c2c:	82 9f       	mul	r24, r18
 c2e:	22 27       	eor	r18, r18
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	62 1f       	adc	r22, r18
 c36:	73 9f       	mul	r23, r19
 c38:	b0 0d       	add	r27, r0
 c3a:	a1 1d       	adc	r26, r1
 c3c:	62 1f       	adc	r22, r18
 c3e:	83 9f       	mul	r24, r19
 c40:	a0 0d       	add	r26, r0
 c42:	61 1d       	adc	r22, r1
 c44:	22 1f       	adc	r18, r18
 c46:	74 9f       	mul	r23, r20
 c48:	33 27       	eor	r19, r19
 c4a:	a0 0d       	add	r26, r0
 c4c:	61 1d       	adc	r22, r1
 c4e:	23 1f       	adc	r18, r19
 c50:	84 9f       	mul	r24, r20
 c52:	60 0d       	add	r22, r0
 c54:	21 1d       	adc	r18, r1
 c56:	82 2f       	mov	r24, r18
 c58:	76 2f       	mov	r23, r22
 c5a:	6a 2f       	mov	r22, r26
 c5c:	11 24       	eor	r1, r1
 c5e:	9f 57       	subi	r25, 0x7F	; 127
 c60:	50 40       	sbci	r21, 0x00	; 0
 c62:	9a f0       	brmi	.+38     	; 0xc8a <__mulsf3_pse+0x88>
 c64:	f1 f0       	breq	.+60     	; 0xca2 <__mulsf3_pse+0xa0>
 c66:	88 23       	and	r24, r24
 c68:	4a f0       	brmi	.+18     	; 0xc7c <__mulsf3_pse+0x7a>
 c6a:	ee 0f       	add	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	bb 1f       	adc	r27, r27
 c70:	66 1f       	adc	r22, r22
 c72:	77 1f       	adc	r23, r23
 c74:	88 1f       	adc	r24, r24
 c76:	91 50       	subi	r25, 0x01	; 1
 c78:	50 40       	sbci	r21, 0x00	; 0
 c7a:	a9 f7       	brne	.-22     	; 0xc66 <__mulsf3_pse+0x64>
 c7c:	9e 3f       	cpi	r25, 0xFE	; 254
 c7e:	51 05       	cpc	r21, r1
 c80:	80 f0       	brcs	.+32     	; 0xca2 <__mulsf3_pse+0xa0>
 c82:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_inf>
 c86:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_szero>
 c8a:	5f 3f       	cpi	r21, 0xFF	; 255
 c8c:	e4 f3       	brlt	.-8      	; 0xc86 <__mulsf3_pse+0x84>
 c8e:	98 3e       	cpi	r25, 0xE8	; 232
 c90:	d4 f3       	brlt	.-12     	; 0xc86 <__mulsf3_pse+0x84>
 c92:	86 95       	lsr	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	b7 95       	ror	r27
 c9a:	f7 95       	ror	r31
 c9c:	e7 95       	ror	r30
 c9e:	9f 5f       	subi	r25, 0xFF	; 255
 ca0:	c1 f7       	brne	.-16     	; 0xc92 <__mulsf3_pse+0x90>
 ca2:	fe 2b       	or	r31, r30
 ca4:	88 0f       	add	r24, r24
 ca6:	91 1d       	adc	r25, r1
 ca8:	96 95       	lsr	r25
 caa:	87 95       	ror	r24
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__fp_inf>:
 cb0:	97 f9       	bld	r25, 7
 cb2:	9f 67       	ori	r25, 0x7F	; 127
 cb4:	80 e8       	ldi	r24, 0x80	; 128
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	08 95       	ret

00000cbc <__fp_nan>:
 cbc:	9f ef       	ldi	r25, 0xFF	; 255
 cbe:	80 ec       	ldi	r24, 0xC0	; 192
 cc0:	08 95       	ret

00000cc2 <__fp_pscA>:
 cc2:	00 24       	eor	r0, r0
 cc4:	0a 94       	dec	r0
 cc6:	16 16       	cp	r1, r22
 cc8:	17 06       	cpc	r1, r23
 cca:	18 06       	cpc	r1, r24
 ccc:	09 06       	cpc	r0, r25
 cce:	08 95       	ret

00000cd0 <__fp_pscB>:
 cd0:	00 24       	eor	r0, r0
 cd2:	0a 94       	dec	r0
 cd4:	12 16       	cp	r1, r18
 cd6:	13 06       	cpc	r1, r19
 cd8:	14 06       	cpc	r1, r20
 cda:	05 06       	cpc	r0, r21
 cdc:	08 95       	ret

00000cde <__fp_round>:
 cde:	09 2e       	mov	r0, r25
 ce0:	03 94       	inc	r0
 ce2:	00 0c       	add	r0, r0
 ce4:	11 f4       	brne	.+4      	; 0xcea <__fp_round+0xc>
 ce6:	88 23       	and	r24, r24
 ce8:	52 f0       	brmi	.+20     	; 0xcfe <__fp_round+0x20>
 cea:	bb 0f       	add	r27, r27
 cec:	40 f4       	brcc	.+16     	; 0xcfe <__fp_round+0x20>
 cee:	bf 2b       	or	r27, r31
 cf0:	11 f4       	brne	.+4      	; 0xcf6 <__fp_round+0x18>
 cf2:	60 ff       	sbrs	r22, 0
 cf4:	04 c0       	rjmp	.+8      	; 0xcfe <__fp_round+0x20>
 cf6:	6f 5f       	subi	r22, 0xFF	; 255
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
