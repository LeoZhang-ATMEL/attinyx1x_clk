
attiny1617_clk_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  00000eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036a8  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022b2  00000000  00000000  00004768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eda  00000000  00000000  00006a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f0  00000000  00000000  000078f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017b8  00000000  00000000  00007ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bae  00000000  00000000  0000969c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000a24a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_3>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62
  88:	0e 94 11 02 	call	0x422	; 0x422 <main>
  8c:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	system_init();
  9c:	0e 94 9c 05 	call	0xb38	; 0xb38 <system_init>
}
  a0:	00 00       	nop
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <PORTA_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <PORTA_pin_set_isc+0x6>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <PORTA_pin_set_isc+0x8>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	8b 83       	std	Y+3, r24	; 0x03
  b6:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	80 5f       	subi	r24, 0xF0	; 240
  c0:	9b 4f       	sbci	r25, 0xFB	; 251
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	98 2f       	mov	r25, r24
  d0:	98 7f       	andi	r25, 0xF8	; 248
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	89 2b       	or	r24, r25
  d6:	28 2f       	mov	r18, r24
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	24 96       	adiw	r28, 0x04	; 4
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <PORTA_set_pin_level+0x6>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	88 23       	and	r24, r24
 100:	a9 f0       	breq	.+42     	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
		VPORTA.OUT |= (1 << pin);
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	68 2f       	mov	r22, r24
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	48 2f       	mov	r20, r24
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
 124:	86 2b       	or	r24, r22
 126:	f9 01       	movw	r30, r18
 128:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 12a:	15 c0       	rjmp	.+42     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	81 81       	ldd	r24, Z+1	; 0x01
 138:	68 2f       	mov	r22, r24
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	48 2f       	mov	r20, r24
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	4a 95       	dec	r20
 14c:	e2 f7       	brpl	.-8      	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
 14e:	80 95       	com	r24
 150:	86 23       	and	r24, r22
 152:	f9 01       	movw	r30, r18
 154:	81 83       	std	Z+1, r24	; 0x01
	}
}
 156:	00 00       	nop
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <PORTA_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	89 83       	std	Y+1, r24	; 0x01
	return VPORTA.IN & (1 << pin);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	48 2f       	mov	r20, r24
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <PORTA_get_pin_level+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <PORTA_get_pin_level+0x24>
 18e:	82 23       	and	r24, r18
 190:	93 23       	and	r25, r19
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	89 2b       	or	r24, r25
 196:	09 f4       	brne	.+2      	; 0x19a <PORTA_get_pin_level+0x38>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	82 2f       	mov	r24, r18
}
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <PORTB_set_pin_dir+0x6>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	e1 f0       	breq	.+56     	; 0x1f6 <PORTB_set_pin_dir+0x52>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	91 05       	cpc	r25, r1
 1c2:	71 f1       	breq	.+92     	; 0x220 <PORTB_set_pin_dir+0x7c>
 1c4:	89 2b       	or	r24, r25
 1c6:	09 f0       	breq	.+2      	; 0x1ca <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 1c8:	3b c0       	rjmp	.+118    	; 0x240 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	24 e0       	ldi	r18, 0x04	; 4
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	62 2f       	mov	r22, r18
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	42 2f       	mov	r20, r18
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <PORTB_set_pin_dir+0x44>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	4a 95       	dec	r20
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <PORTB_set_pin_dir+0x40>
 1ec:	20 95       	com	r18
 1ee:	26 23       	and	r18, r22
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
		break;
 1f4:	25 c0       	rjmp	.+74     	; 0x240 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	24 e0       	ldi	r18, 0x04	; 4
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	f9 01       	movw	r30, r18
 200:	20 81       	ld	r18, Z
 202:	62 2f       	mov	r22, r18
 204:	29 81       	ldd	r18, Y+1	; 0x01
 206:	42 2f       	mov	r20, r18
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <PORTB_set_pin_dir+0x70>
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	4a 95       	dec	r20
 216:	e2 f7       	brpl	.-8      	; 0x210 <PORTB_set_pin_dir+0x6c>
 218:	26 2b       	or	r18, r22
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
		break;
 21e:	10 c0       	rjmp	.+32     	; 0x240 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	80 5d       	subi	r24, 0xD0	; 208
 228:	9b 4f       	sbci	r25, 0xFB	; 251
 22a:	29 81       	ldd	r18, Y+1	; 0x01
 22c:	22 2f       	mov	r18, r18
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	20 5d       	subi	r18, 0xD0	; 208
 232:	3b 4f       	sbci	r19, 0xFB	; 251
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	28 60       	ori	r18, 0x08	; 8
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
		break;
 23e:	00 00       	nop
	default:
		break;
	}
}
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <PORTB_set_pin_level+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	88 23       	and	r24, r24
 25e:	a9 f0       	breq	.+42     	; 0x28a <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	24 e0       	ldi	r18, 0x04	; 4
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	21 81       	ldd	r18, Z+1	; 0x01
 26c:	62 2f       	mov	r22, r18
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	42 2f       	mov	r20, r18
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <PORTB_set_pin_level+0x32>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	4a 95       	dec	r20
 280:	e2 f7       	brpl	.-8      	; 0x27a <PORTB_set_pin_level+0x2e>
 282:	26 2b       	or	r18, r22
 284:	fc 01       	movw	r30, r24
 286:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
 288:	15 c0       	rjmp	.+42     	; 0x2b4 <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	24 e0       	ldi	r18, 0x04	; 4
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	f9 01       	movw	r30, r18
 294:	21 81       	ldd	r18, Z+1	; 0x01
 296:	62 2f       	mov	r22, r18
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	42 2f       	mov	r20, r18
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <PORTB_set_pin_level+0x5c>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	4a 95       	dec	r20
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <PORTB_set_pin_level+0x58>
 2ac:	20 95       	com	r18
 2ae:	26 23       	and	r18, r22
 2b0:	fc 01       	movw	r30, r24
 2b2:	21 83       	std	Z+1, r18	; 0x01
	}
}
 2b4:	00 00       	nop
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	1f 92       	push	r1
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	24 e0       	ldi	r18, 0x04	; 4
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	22 81       	ldd	r18, Z+2	; 0x02
 2d8:	62 2f       	mov	r22, r18
 2da:	29 81       	ldd	r18, Y+1	; 0x01
 2dc:	42 2f       	mov	r20, r18
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <PORTB_toggle_pin_level+0x2a>
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	4a 95       	dec	r20
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <PORTB_toggle_pin_level+0x26>
 2ee:	26 2b       	or	r18, r22
 2f0:	fc 01       	movw	r30, r24
 2f2:	22 83       	std	Z+2, r18	; 0x02
}
 2f4:	00 00       	nop
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <PA2_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PA2_set_isc(const PORT_ISC_t isc)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_isc(2, isc);
 30a:	69 81       	ldd	r22, Y+1	; 0x01
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 54 00 	call	0xa8	; 0xa8 <PORTA_pin_set_isc>
}
 312:	00 00       	nop
 314:	0f 90       	pop	r0
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <PA2_get_level>:
 * \brief Get level on PA2
 *
 * Reads the level on a pin
 */
static inline bool PA2_get_level()
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	return PORTA_get_pin_level(2);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 b1 00 	call	0x162	; 0x162 <PORTA_get_pin_level>
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void EN_set_level(const bool level)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	1f 92       	push	r1
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 33c:	69 81       	ldd	r22, Y+1	; 0x01
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 77 00 	call	0xee	; 0xee <PORTA_set_pin_level>
}
 344:	00 00       	nop
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	1f 92       	push	r1
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(3, level);
 35a:	69 81       	ldd	r22, Y+1	; 0x01
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 26 01 	call	0x24c	; 0x24c <PORTB_set_pin_level>
}
 362:	00 00       	nop
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <LED1_toggle_level>:
 * \brief Toggle output level on LED1
 *
 * Toggle the pin level
 */
static inline void LED1_toggle_level()
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 60 01 	call	0x2c0	; 0x2c0 <PORTB_toggle_pin_level>
}
 37a:	00 00       	nop
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	1f 92       	push	r1
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(4, level);
 38e:	69 81       	ldd	r22, Y+1	; 0x01
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	0e 94 26 01 	call	0x24c	; 0x24c <PORTB_set_pin_level>
}
 396:	00 00       	nop
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LED3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED3_set_dir(const enum port_dir dir)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(5, dir);
 3ac:	69 81       	ldd	r22, Y+1	; 0x01
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <PORTB_set_pin_dir>
}
 3b4:	00 00       	nop
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <LED3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED3_set_level(const bool level)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	1f 92       	push	r1
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(5, level);
 3ca:	69 81       	ldd	r22, Y+1	; 0x01
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	0e 94 26 01 	call	0x24c	; 0x24c <PORTB_set_pin_level>
}
 3d2:	00 00       	nop
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <ccp_write_io+0x6>
 3e2:	1f 92       	push	r1
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	9a 83       	std	Y+2, r25	; 0x02
 3ec:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	4b 81       	ldd	r20, Y+3	; 0x03
 3f4:	68 ed       	ldi	r22, 0xD8	; 216
 3f6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <protected_write_io>
}
 3fa:	00 00       	nop
 3fc:	23 96       	adiw	r28, 0x03	; 3
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	de bf       	out	0x3e, r29	; 62
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <RSTCTRL_reset>:
#endif

#include <ccp.h>

static inline void RSTCTRL_reset(void)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
	/* SWRR is protected with CCP */
	ccp_write_io((void *)&RSTCTRL.SWRR, 0x1);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	81 e4       	ldi	r24, 0x41	; 65
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ccp_write_io>
}
 41a:	00 00       	nop
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <main>:
#include <util/delay.h>
#include "rstctrl.h"
#include <avr/sleep.h>
extern void PWM_0_init();
int main(void)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	2f 97       	sbiw	r28, 0x0f	; 15
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	de bf       	out	0x3e, r29	; 62
	//ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 16MHz Internal Oscillator (OSC16M) */
	//		 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);
	PWM_0_init();
 430:	0e 94 22 03 	call	0x644	; 0x644 <PWM_0_init>
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 434:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>

	/* Replace with your application code */
	uint8_t i;
	for (i = 0; i < 10; i++) {
 438:	19 82       	std	Y+1, r1	; 0x01
 43a:	77 c0       	rjmp	.+238    	; 0x52a <main+0x108>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	aa ef       	ldi	r26, 0xFA	; 250
 442:	b3 e4       	ldi	r27, 0x43	; 67
 444:	8a 83       	std	Y+2, r24	; 0x02
 446:	9b 83       	std	Y+3, r25	; 0x03
 448:	ac 83       	std	Y+4, r26	; 0x04
 44a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	4a e7       	ldi	r20, 0x7A	; 122
 452:	55 e4       	ldi	r21, 0x45	; 69
 454:	6a 81       	ldd	r22, Y+2	; 0x02
 456:	7b 81       	ldd	r23, Y+3	; 0x03
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	9d 81       	ldd	r25, Y+5	; 0x05
 45c:	0e 94 5d 06 	call	0xcba	; 0xcba <__mulsf3>
 460:	dc 01       	movw	r26, r24
 462:	cb 01       	movw	r24, r22
 464:	8e 83       	std	Y+6, r24	; 0x06
 466:	9f 83       	std	Y+7, r25	; 0x07
 468:	a8 87       	std	Y+8, r26	; 0x08
 46a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e8       	ldi	r20, 0x80	; 128
 472:	5f e3       	ldi	r21, 0x3F	; 63
 474:	6e 81       	ldd	r22, Y+6	; 0x06
 476:	7f 81       	ldd	r23, Y+7	; 0x07
 478:	88 85       	ldd	r24, Y+8	; 0x08
 47a:	99 85       	ldd	r25, Y+9	; 0x09
 47c:	0e 94 d7 05 	call	0xbae	; 0xbae <__cmpsf2>
 480:	88 23       	and	r24, r24
 482:	2c f4       	brge	.+10     	; 0x48e <main+0x6c>
		__ticks = 1;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	8a 87       	std	Y+10, r24	; 0x0a
 48a:	9b 87       	std	Y+11, r25	; 0x0b
 48c:	3f c0       	rjmp	.+126    	; 0x50c <main+0xea>
	else if (__tmp > 65535)
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	3f ef       	ldi	r19, 0xFF	; 255
 492:	4f e7       	ldi	r20, 0x7F	; 127
 494:	57 e4       	ldi	r21, 0x47	; 71
 496:	6e 81       	ldd	r22, Y+6	; 0x06
 498:	7f 81       	ldd	r23, Y+7	; 0x07
 49a:	88 85       	ldd	r24, Y+8	; 0x08
 49c:	99 85       	ldd	r25, Y+9	; 0x09
 49e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__gesf2>
 4a2:	18 16       	cp	r1, r24
 4a4:	4c f5       	brge	.+82     	; 0x4f8 <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e2       	ldi	r20, 0x20	; 32
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	6a 81       	ldd	r22, Y+2	; 0x02
 4b0:	7b 81       	ldd	r23, Y+3	; 0x03
 4b2:	8c 81       	ldd	r24, Y+4	; 0x04
 4b4:	9d 81       	ldd	r25, Y+5	; 0x05
 4b6:	0e 94 5d 06 	call	0xcba	; 0xcba <__mulsf3>
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
 4be:	bc 01       	movw	r22, r24
 4c0:	cd 01       	movw	r24, r26
 4c2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fixunssfsi>
 4c6:	dc 01       	movw	r26, r24
 4c8:	cb 01       	movw	r24, r22
 4ca:	8a 87       	std	Y+10, r24	; 0x0a
 4cc:	9b 87       	std	Y+11, r25	; 0x0b
 4ce:	0f c0       	rjmp	.+30     	; 0x4ee <main+0xcc>
 4d0:	80 e9       	ldi	r24, 0x90	; 144
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	8c 87       	std	Y+12, r24	; 0x0c
 4d6:	9d 87       	std	Y+13, r25	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4d8:	8c 85       	ldd	r24, Y+12	; 0x0c
 4da:	9d 85       	ldd	r25, Y+13	; 0x0d
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <main+0xba>
 4e0:	8c 87       	std	Y+12, r24	; 0x0c
 4e2:	9d 87       	std	Y+13, r25	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e4:	8a 85       	ldd	r24, Y+10	; 0x0a
 4e6:	9b 85       	ldd	r25, Y+11	; 0x0b
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	8a 87       	std	Y+10, r24	; 0x0a
 4ec:	9b 87       	std	Y+11, r25	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ee:	8a 85       	ldd	r24, Y+10	; 0x0a
 4f0:	9b 85       	ldd	r25, Y+11	; 0x0b
 4f2:	89 2b       	or	r24, r25
 4f4:	69 f7       	brne	.-38     	; 0x4d0 <main+0xae>
 4f6:	14 c0       	rjmp	.+40     	; 0x520 <main+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4f8:	6e 81       	ldd	r22, Y+6	; 0x06
 4fa:	7f 81       	ldd	r23, Y+7	; 0x07
 4fc:	88 85       	ldd	r24, Y+8	; 0x08
 4fe:	99 85       	ldd	r25, Y+9	; 0x09
 500:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fixunssfsi>
 504:	dc 01       	movw	r26, r24
 506:	cb 01       	movw	r24, r22
 508:	8a 87       	std	Y+10, r24	; 0x0a
 50a:	9b 87       	std	Y+11, r25	; 0x0b
 50c:	8a 85       	ldd	r24, Y+10	; 0x0a
 50e:	9b 85       	ldd	r25, Y+11	; 0x0b
 510:	8e 87       	std	Y+14, r24	; 0x0e
 512:	9f 87       	std	Y+15, r25	; 0x0f
 514:	8e 85       	ldd	r24, Y+14	; 0x0e
 516:	9f 85       	ldd	r25, Y+15	; 0x0f
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <main+0xf6>
 51c:	8e 87       	std	Y+14, r24	; 0x0e
 51e:	9f 87       	std	Y+15, r25	; 0x0f
		_delay_ms(500);
		LED1_toggle_level();	
 520:	0e 94 b6 01 	call	0x36c	; 0x36c <LED1_toggle_level>
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();

	/* Replace with your application code */
	uint8_t i;
	for (i = 0; i < 10; i++) {
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	8a 30       	cpi	r24, 0x0A	; 10
 52e:	08 f4       	brcc	.+2      	; 0x532 <main+0x110>
 530:	85 cf       	rjmp	.-246    	; 0x43c <main+0x1a>
		_delay_ms(500);
		LED1_toggle_level();	
	}
	
	/* set the alternate pin mux */
	LED3_set_dir(PORT_DIR_OUT);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED3_set_dir>
	PORTMUX.CTRLC = 0x00;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	92 e0       	ldi	r25, 0x02	; 2
 53c:	fc 01       	movw	r30, r24
 53e:	12 82       	std	Z+2, r1	; 0x02
	LED1_set_level(false);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 a7 01 	call	0x34e	; 0x34e <LED1_set_level>
	LED2_set_level(false);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 c1 01 	call	0x382	; 0x382 <LED2_set_level>
	LED3_set_level(false);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 df 01 	call	0x3be	; 0x3be <LED3_set_level>
	if(PORTA_INTFLAGS & 0x04)PORTA_INTFLAGS|=0x04;
 552:	89 e0       	ldi	r24, 0x09	; 9
 554:	94 e0       	ldi	r25, 0x04	; 4
 556:	fc 01       	movw	r30, r24
 558:	80 81       	ld	r24, Z
 55a:	88 2f       	mov	r24, r24
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	84 70       	andi	r24, 0x04	; 4
 560:	99 27       	eor	r25, r25
 562:	89 2b       	or	r24, r25
 564:	49 f0       	breq	.+18     	; 0x578 <main+0x156>
 566:	89 e0       	ldi	r24, 0x09	; 9
 568:	94 e0       	ldi	r25, 0x04	; 4
 56a:	29 e0       	ldi	r18, 0x09	; 9
 56c:	34 e0       	ldi	r19, 0x04	; 4
 56e:	f9 01       	movw	r30, r18
 570:	20 81       	ld	r18, Z
 572:	24 60       	ori	r18, 0x04	; 4
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
	PA2_set_isc(PORT_ISC_LEVEL_gc);
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <PA2_set_isc>
	
	EN_set_level(false);
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e 94 98 01 	call	0x330	; 0x330 <EN_set_level>
	sleep_mode();
 584:	80 e5       	ldi	r24, 0x50	; 80
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	20 e5       	ldi	r18, 0x50	; 80
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	20 81       	ld	r18, Z
 590:	21 60       	ori	r18, 0x01	; 1
 592:	fc 01       	movw	r30, r24
 594:	20 83       	st	Z, r18
 596:	88 95       	sleep
 598:	80 e5       	ldi	r24, 0x50	; 80
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	20 e5       	ldi	r18, 0x50	; 80
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	2e 7f       	andi	r18, 0xFE	; 254
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18

	while (1) {
	}
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <main+0x188>

000005ac <__vector_3>:
}

ISR(PORTA_PORT_vect)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
	if(PORTA_INTFLAGS & 0x04) {
 5d8:	89 e0       	ldi	r24, 0x09	; 9
 5da:	94 e0       	ldi	r25, 0x04	; 4
 5dc:	fc 01       	movw	r30, r24
 5de:	80 81       	ld	r24, Z
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	84 70       	andi	r24, 0x04	; 4
 5e6:	99 27       	eor	r25, r25
 5e8:	89 2b       	or	r24, r25
 5ea:	91 f0       	breq	.+36     	; 0x610 <__vector_3+0x64>
		PORTA_INTFLAGS|=0x04;
 5ec:	89 e0       	ldi	r24, 0x09	; 9
 5ee:	94 e0       	ldi	r25, 0x04	; 4
 5f0:	29 e0       	ldi	r18, 0x09	; 9
 5f2:	34 e0       	ldi	r19, 0x04	; 4
 5f4:	f9 01       	movw	r30, r18
 5f6:	20 81       	ld	r18, Z
 5f8:	24 60       	ori	r18, 0x04	; 4
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
		if (PA2_get_level() == false) {
 5fe:	0e 94 8e 01 	call	0x31c	; 0x31c <PA2_get_level>
 602:	98 2f       	mov	r25, r24
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	89 27       	eor	r24, r25
 608:	88 23       	and	r24, r24
 60a:	11 f0       	breq	.+4      	; 0x610 <__vector_3+0x64>
			RSTCTRL_reset();
 60c:	0e 94 04 02 	call	0x408	; 0x408 <RSTCTRL_reset>
		}
	}

	PORTA_INTFLAGS = 0xFF;
 610:	89 e0       	ldi	r24, 0x09	; 9
 612:	94 e0       	ldi	r25, 0x04	; 4
 614:	2f ef       	ldi	r18, 0xFF	; 255
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
}
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <PWM_0_init>:

void PWM_0_init()
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
	LED3_set_level(
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 df 01 	call	0x3be	; 0x3be <LED3_set_level>
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);

		LED3_set_dir(PORT_DIR_OUT);
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED3_set_dir>

		/* set the alternate pin mux */
		PORTMUX.CTRLC |= PORTMUX_TCA02_bm;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	32 e0       	ldi	r19, 0x02	; 2
 660:	f9 01       	movw	r30, r18
 662:	22 81       	ldd	r18, Z+2	; 0x02
 664:	24 60       	ori	r18, 0x04	; 4
 666:	fc 01       	movw	r30, r24
 668:	22 83       	std	Z+2, r18	; 0x02

	// TCA0.SINGLE.CMP0 = 0x0; /* Setting: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Setting: 0x0 */

	TCA0.SINGLE.CMP2 = 0x5; /* Setting: 0x5 */
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	9a e0       	ldi	r25, 0x0A	; 10
 66e:	25 e0       	ldi	r18, 0x05	; 5
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	24 a7       	std	Z+44, r18	; 0x2c
 676:	35 a7       	std	Z+45, r19	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	9a e0       	ldi	r25, 0x0A	; 10
 67c:	23 e4       	ldi	r18, 0x43	; 67
 67e:	fc 01       	movw	r30, r24
 680:	21 83       	std	Z+1, r18	; 0x01
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt Enable: disabled */

	TCA0.SINGLE.PER = 0x9; /* Top Value: 0xa */
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	9a e0       	ldi	r25, 0x0A	; 10
 686:	29 e0       	ldi	r18, 0x09	; 9
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	fc 01       	movw	r30, r24
 68c:	26 a3       	std	Z+38, r18	; 0x26
 68e:	37 a3       	std	Z+39, r19	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	9a e0       	ldi	r25, 0x0A	; 10
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	fc 01       	movw	r30, r24
 698:	20 83       	st	Z, r18
		| 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return;
 69a:	00 00       	nop
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
}
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <ccp_write_io+0x6>
 6b8:	1f 92       	push	r1
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	89 83       	std	Y+1, r24	; 0x01
 6c0:	9a 83       	std	Y+2, r25	; 0x02
 6c2:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	9a 81       	ldd	r25, Y+2	; 0x02
 6c8:	4b 81       	ldd	r20, Y+3	; 0x03
 6ca:	68 ed       	ldi	r22, 0xD8	; 216
 6cc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <protected_write_io>
}
 6d0:	00 00       	nop
 6d2:	23 96       	adiw	r28, 0x03	; 3
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
 6e6:	60 e1       	ldi	r22, 0x10	; 16
 6e8:	81 e6       	ldi	r24, 0x61	; 97
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 59 03 	call	0x6b2	; 0x6b2 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 16MHz Internal Oscillator (OSC16M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 700:	78 94       	sei

	return 0;
 702:	80 e0       	ldi	r24, 0x00	; 0
}
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	00 d0       	rcall	.+0      	; 0x710 <PORTA_set_pin_pull_mode+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <PORTA_set_pin_pull_mode+0x8>
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	8b 83       	std	Y+3, r24	; 0x03
 718:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
 71a:	8b 81       	ldd	r24, Y+3	; 0x03
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	80 5f       	subi	r24, 0xF0	; 240
 722:	9b 4f       	sbci	r25, 0xFB	; 251
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 728:	8c 81       	ldd	r24, Y+4	; 0x04
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	59 f4       	brne	.+22     	; 0x744 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	9a 81       	ldd	r25, Y+2	; 0x02
 732:	fc 01       	movw	r30, r24
 734:	80 81       	ld	r24, Z
 736:	28 2f       	mov	r18, r24
 738:	28 60       	ori	r18, 0x08	; 8
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
 742:	0d c0       	rjmp	.+26     	; 0x75e <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
 744:	8c 81       	ldd	r24, Y+4	; 0x04
 746:	88 23       	and	r24, r24
 748:	51 f4       	brne	.+20     	; 0x75e <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	9a 81       	ldd	r25, Y+2	; 0x02
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	28 2f       	mov	r18, r24
 754:	27 7f       	andi	r18, 0xF7	; 247
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	9a 81       	ldd	r25, Y+2	; 0x02
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
	}
}
 75e:	00 00       	nop
 760:	24 96       	adiw	r28, 0x04	; 4
 762:	cd bf       	out	0x3d, r28	; 61
 764:	de bf       	out	0x3e, r29	; 62
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	00 d0       	rcall	.+0      	; 0x772 <PORTA_set_pin_dir+0x6>
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	89 83       	std	Y+1, r24	; 0x01
 778:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	88 2f       	mov	r24, r24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	81 30       	cpi	r24, 0x01	; 1
 782:	91 05       	cpc	r25, r1
 784:	e1 f0       	breq	.+56     	; 0x7be <PORTA_set_pin_dir+0x52>
 786:	82 30       	cpi	r24, 0x02	; 2
 788:	91 05       	cpc	r25, r1
 78a:	71 f1       	breq	.+92     	; 0x7e8 <PORTA_set_pin_dir+0x7c>
 78c:	89 2b       	or	r24, r25
 78e:	09 f0       	breq	.+2      	; 0x792 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 790:	3b c0       	rjmp	.+118    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	fc 01       	movw	r30, r24
 79c:	80 81       	ld	r24, Z
 79e:	68 2f       	mov	r22, r24
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	48 2f       	mov	r20, r24
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <PORTA_set_pin_dir+0x44>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	4a 95       	dec	r20
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <PORTA_set_pin_dir+0x40>
 7b4:	80 95       	com	r24
 7b6:	86 23       	and	r24, r22
 7b8:	f9 01       	movw	r30, r18
 7ba:	80 83       	st	Z, r24
		break;
 7bc:	25 c0       	rjmp	.+74     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	fc 01       	movw	r30, r24
 7c8:	80 81       	ld	r24, Z
 7ca:	68 2f       	mov	r22, r24
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
 7ce:	48 2f       	mov	r20, r24
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <PORTA_set_pin_dir+0x70>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	4a 95       	dec	r20
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <PORTA_set_pin_dir+0x6c>
 7e0:	86 2b       	or	r24, r22
 7e2:	f9 01       	movw	r30, r18
 7e4:	80 83       	st	Z, r24
		break;
 7e6:	10 c0       	rjmp	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	80 5f       	subi	r24, 0xF0	; 240
 7f0:	9b 4f       	sbci	r25, 0xFB	; 251
 7f2:	29 81       	ldd	r18, Y+1	; 0x01
 7f4:	22 2f       	mov	r18, r18
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	20 5f       	subi	r18, 0xF0	; 240
 7fa:	3b 4f       	sbci	r19, 0xFB	; 251
 7fc:	f9 01       	movw	r30, r18
 7fe:	20 81       	ld	r18, Z
 800:	28 60       	ori	r18, 0x08	; 8
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
		break;
 806:	00 00       	nop
	default:
		break;
	}
}
 808:	00 00       	nop
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	00 d0       	rcall	.+0      	; 0x81a <PORTA_set_pin_level+0x6>
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	89 83       	std	Y+1, r24	; 0x01
 820:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 822:	8a 81       	ldd	r24, Y+2	; 0x02
 824:	88 23       	and	r24, r24
 826:	a9 f0       	breq	.+42     	; 0x852 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	fc 01       	movw	r30, r24
 832:	81 81       	ldd	r24, Z+1	; 0x01
 834:	68 2f       	mov	r22, r24
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	48 2f       	mov	r20, r24
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <PORTA_set_pin_level+0x32>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	4a 95       	dec	r20
 848:	e2 f7       	brpl	.-8      	; 0x842 <PORTA_set_pin_level+0x2e>
 84a:	86 2b       	or	r24, r22
 84c:	f9 01       	movw	r30, r18
 84e:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 850:	15 c0       	rjmp	.+42     	; 0x87c <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	fc 01       	movw	r30, r24
 85c:	81 81       	ldd	r24, Z+1	; 0x01
 85e:	68 2f       	mov	r22, r24
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	48 2f       	mov	r20, r24
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <PORTA_set_pin_level+0x5c>
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	4a 95       	dec	r20
 872:	e2 f7       	brpl	.-8      	; 0x86c <PORTA_set_pin_level+0x58>
 874:	80 95       	com	r24
 876:	86 23       	and	r24, r22
 878:	f9 01       	movw	r30, r18
 87a:	81 83       	std	Z+1, r24	; 0x01
	}
}
 87c:	00 00       	nop
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <PORTB_set_pin_dir+0x6>
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	81 30       	cpi	r24, 0x01	; 1
 89e:	91 05       	cpc	r25, r1
 8a0:	e1 f0       	breq	.+56     	; 0x8da <PORTB_set_pin_dir+0x52>
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	91 05       	cpc	r25, r1
 8a6:	71 f1       	breq	.+92     	; 0x904 <PORTB_set_pin_dir+0x7c>
 8a8:	89 2b       	or	r24, r25
 8aa:	09 f0       	breq	.+2      	; 0x8ae <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 8ac:	3b c0       	rjmp	.+118    	; 0x924 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 8ae:	84 e0       	ldi	r24, 0x04	; 4
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	24 e0       	ldi	r18, 0x04	; 4
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	f9 01       	movw	r30, r18
 8b8:	20 81       	ld	r18, Z
 8ba:	62 2f       	mov	r22, r18
 8bc:	29 81       	ldd	r18, Y+1	; 0x01
 8be:	42 2f       	mov	r20, r18
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <PORTB_set_pin_dir+0x44>
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	4a 95       	dec	r20
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <PORTB_set_pin_dir+0x40>
 8d0:	20 95       	com	r18
 8d2:	26 23       	and	r18, r22
 8d4:	fc 01       	movw	r30, r24
 8d6:	20 83       	st	Z, r18
		break;
 8d8:	25 c0       	rjmp	.+74     	; 0x924 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 8da:	84 e0       	ldi	r24, 0x04	; 4
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	24 e0       	ldi	r18, 0x04	; 4
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	f9 01       	movw	r30, r18
 8e4:	20 81       	ld	r18, Z
 8e6:	62 2f       	mov	r22, r18
 8e8:	29 81       	ldd	r18, Y+1	; 0x01
 8ea:	42 2f       	mov	r20, r18
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <PORTB_set_pin_dir+0x70>
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	4a 95       	dec	r20
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <PORTB_set_pin_dir+0x6c>
 8fc:	26 2b       	or	r18, r22
 8fe:	fc 01       	movw	r30, r24
 900:	20 83       	st	Z, r18
		break;
 902:	10 c0       	rjmp	.+32     	; 0x924 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	88 2f       	mov	r24, r24
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	80 5d       	subi	r24, 0xD0	; 208
 90c:	9b 4f       	sbci	r25, 0xFB	; 251
 90e:	29 81       	ldd	r18, Y+1	; 0x01
 910:	22 2f       	mov	r18, r18
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	20 5d       	subi	r18, 0xD0	; 208
 916:	3b 4f       	sbci	r19, 0xFB	; 251
 918:	f9 01       	movw	r30, r18
 91a:	20 81       	ld	r18, Z
 91c:	28 60       	ori	r18, 0x08	; 8
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
		break;
 922:	00 00       	nop
	default:
		break;
	}
}
 924:	00 00       	nop
 926:	0f 90       	pop	r0
 928:	0f 90       	pop	r0
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	00 d0       	rcall	.+0      	; 0x936 <PORTB_set_pin_level+0x6>
 936:	cd b7       	in	r28, 0x3d	; 61
 938:	de b7       	in	r29, 0x3e	; 62
 93a:	89 83       	std	Y+1, r24	; 0x01
 93c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	88 23       	and	r24, r24
 942:	a9 f0       	breq	.+42     	; 0x96e <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
 944:	84 e0       	ldi	r24, 0x04	; 4
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	24 e0       	ldi	r18, 0x04	; 4
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	f9 01       	movw	r30, r18
 94e:	21 81       	ldd	r18, Z+1	; 0x01
 950:	62 2f       	mov	r22, r18
 952:	29 81       	ldd	r18, Y+1	; 0x01
 954:	42 2f       	mov	r20, r18
 956:	50 e0       	ldi	r21, 0x00	; 0
 958:	21 e0       	ldi	r18, 0x01	; 1
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	02 c0       	rjmp	.+4      	; 0x962 <PORTB_set_pin_level+0x32>
 95e:	22 0f       	add	r18, r18
 960:	33 1f       	adc	r19, r19
 962:	4a 95       	dec	r20
 964:	e2 f7       	brpl	.-8      	; 0x95e <PORTB_set_pin_level+0x2e>
 966:	26 2b       	or	r18, r22
 968:	fc 01       	movw	r30, r24
 96a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
 96c:	15 c0       	rjmp	.+42     	; 0x998 <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 96e:	84 e0       	ldi	r24, 0x04	; 4
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	24 e0       	ldi	r18, 0x04	; 4
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	f9 01       	movw	r30, r18
 978:	21 81       	ldd	r18, Z+1	; 0x01
 97a:	62 2f       	mov	r22, r18
 97c:	29 81       	ldd	r18, Y+1	; 0x01
 97e:	42 2f       	mov	r20, r18
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	21 e0       	ldi	r18, 0x01	; 1
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <PORTB_set_pin_level+0x5c>
 988:	22 0f       	add	r18, r18
 98a:	33 1f       	adc	r19, r19
 98c:	4a 95       	dec	r20
 98e:	e2 f7       	brpl	.-8      	; 0x988 <PORTB_set_pin_level+0x58>
 990:	20 95       	com	r18
 992:	26 23       	and	r18, r22
 994:	fc 01       	movw	r30, r24
 996:	21 83       	std	Z+1, r18	; 0x01
	}
}
 998:	00 00       	nop
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <PA2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA2_set_pull_mode(const enum port_pull_mode pull_mode)
{
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	1f 92       	push	r1
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
 9ae:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
 9b0:	69 81       	ldd	r22, Y+1	; 0x01
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	0e 94 85 03 	call	0x70a	; 0x70a <PORTA_set_pin_pull_mode>
}
 9b8:	00 00       	nop
 9ba:	0f 90       	pop	r0
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	08 95       	ret

000009c2 <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	1f 92       	push	r1
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
 9ce:	69 81       	ldd	r22, Y+1	; 0x01
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	0e 94 b6 03 	call	0x76c	; 0x76c <PORTA_set_pin_dir>
}
 9d6:	00 00       	nop
 9d8:	0f 90       	pop	r0
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	08 95       	ret

000009e0 <EN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void EN_set_dir(const enum port_dir dir)
{
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	1f 92       	push	r1
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 9ec:	69 81       	ldd	r22, Y+1	; 0x01
 9ee:	83 e0       	ldi	r24, 0x03	; 3
 9f0:	0e 94 b6 03 	call	0x76c	; 0x76c <PORTA_set_pin_dir>
}
 9f4:	00 00       	nop
 9f6:	0f 90       	pop	r0
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void EN_set_level(const bool level)
{
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	1f 92       	push	r1
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 a0a:	69 81       	ldd	r22, Y+1	; 0x01
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	0e 94 0a 04 	call	0x814	; 0x814 <PORTA_set_pin_level>
}
 a12:	00 00       	nop
 a14:	0f 90       	pop	r0
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	08 95       	ret

00000a1c <LED1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED1_set_dir(const enum port_dir dir)
{
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	1f 92       	push	r1
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(3, dir);
 a28:	69 81       	ldd	r22, Y+1	; 0x01
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	0e 94 44 04 	call	0x888	; 0x888 <PORTB_set_pin_dir>
}
 a30:	00 00       	nop
 a32:	0f 90       	pop	r0
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	08 95       	ret

00000a3a <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	1f 92       	push	r1
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(3, level);
 a46:	69 81       	ldd	r22, Y+1	; 0x01
 a48:	83 e0       	ldi	r24, 0x03	; 3
 a4a:	0e 94 98 04 	call	0x930	; 0x930 <PORTB_set_pin_level>
}
 a4e:	00 00       	nop
 a50:	0f 90       	pop	r0
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <LED2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED2_set_dir(const enum port_dir dir)
{
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	1f 92       	push	r1
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(4, dir);
 a64:	69 81       	ldd	r22, Y+1	; 0x01
 a66:	84 e0       	ldi	r24, 0x04	; 4
 a68:	0e 94 44 04 	call	0x888	; 0x888 <PORTB_set_pin_dir>
}
 a6c:	00 00       	nop
 a6e:	0f 90       	pop	r0
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	08 95       	ret

00000a76 <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	1f 92       	push	r1
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(4, level);
 a82:	69 81       	ldd	r22, Y+1	; 0x01
 a84:	84 e0       	ldi	r24, 0x04	; 4
 a86:	0e 94 98 04 	call	0x930	; 0x930 <PORTB_set_pin_level>
}
 a8a:	00 00       	nop
 a8c:	0f 90       	pop	r0
 a8e:	df 91       	pop	r29
 a90:	cf 91       	pop	r28
 a92:	08 95       	ret

00000a94 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	00 d0       	rcall	.+0      	; 0xa9a <mcu_init+0x6>
 a9a:	1f 92       	push	r1
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 aa0:	19 82       	std	Y+1, r1	; 0x01
 aa2:	12 c0       	rjmp	.+36     	; 0xac8 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 aa4:	89 81       	ldd	r24, Y+1	; 0x01
 aa6:	88 2f       	mov	r24, r24
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	80 5f       	subi	r24, 0xF0	; 240
 aac:	9b 4f       	sbci	r25, 0xFB	; 251
 aae:	29 81       	ldd	r18, Y+1	; 0x01
 ab0:	22 2f       	mov	r18, r18
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	20 5f       	subi	r18, 0xF0	; 240
 ab6:	3b 4f       	sbci	r19, 0xFB	; 251
 ab8:	f9 01       	movw	r30, r18
 aba:	20 81       	ld	r18, Z
 abc:	28 60       	ori	r18, 0x08	; 8
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 ac2:	89 81       	ldd	r24, Y+1	; 0x01
 ac4:	8f 5f       	subi	r24, 0xFF	; 255
 ac6:	89 83       	std	Y+1, r24	; 0x01
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	88 30       	cpi	r24, 0x08	; 8
 acc:	58 f3       	brcs	.-42     	; 0xaa4 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 ace:	1a 82       	std	Y+2, r1	; 0x02
 ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <mcu_init+0x62>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 ad2:	8a 81       	ldd	r24, Y+2	; 0x02
 ad4:	88 2f       	mov	r24, r24
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	80 5d       	subi	r24, 0xD0	; 208
 ada:	9b 4f       	sbci	r25, 0xFB	; 251
 adc:	2a 81       	ldd	r18, Y+2	; 0x02
 ade:	22 2f       	mov	r18, r18
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	20 5d       	subi	r18, 0xD0	; 208
 ae4:	3b 4f       	sbci	r19, 0xFB	; 251
 ae6:	f9 01       	movw	r30, r18
 ae8:	20 81       	ld	r18, Z
 aea:	28 60       	ori	r18, 0x08	; 8
 aec:	fc 01       	movw	r30, r24
 aee:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	8f 5f       	subi	r24, 0xFF	; 255
 af4:	8a 83       	std	Y+2, r24	; 0x02
 af6:	8a 81       	ldd	r24, Y+2	; 0x02
 af8:	88 30       	cpi	r24, 0x08	; 8
 afa:	58 f3       	brcs	.-42     	; 0xad2 <mcu_init+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 afc:	1b 82       	std	Y+3, r1	; 0x03
 afe:	12 c0       	rjmp	.+36     	; 0xb24 <mcu_init+0x90>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b00:	8b 81       	ldd	r24, Y+3	; 0x03
 b02:	88 2f       	mov	r24, r24
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	80 5b       	subi	r24, 0xB0	; 176
 b08:	9b 4f       	sbci	r25, 0xFB	; 251
 b0a:	2b 81       	ldd	r18, Y+3	; 0x03
 b0c:	22 2f       	mov	r18, r18
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	20 5b       	subi	r18, 0xB0	; 176
 b12:	3b 4f       	sbci	r19, 0xFB	; 251
 b14:	f9 01       	movw	r30, r18
 b16:	20 81       	ld	r18, Z
 b18:	28 60       	ori	r18, 0x08	; 8
 b1a:	fc 01       	movw	r30, r24
 b1c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b1e:	8b 81       	ldd	r24, Y+3	; 0x03
 b20:	8f 5f       	subi	r24, 0xFF	; 255
 b22:	8b 83       	std	Y+3, r24	; 0x03
 b24:	8b 81       	ldd	r24, Y+3	; 0x03
 b26:	88 30       	cpi	r24, 0x08	; 8
 b28:	58 f3       	brcs	.-42     	; 0xb00 <mcu_init+0x6c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 b2a:	00 00       	nop
 b2c:	23 96       	adiw	r28, 0x03	; 3
 b2e:	cd bf       	out	0x3d, r28	; 61
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	08 95       	ret

00000b38 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	cd b7       	in	r28, 0x3d	; 61
 b3e:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 b40:	0e 94 4a 05 	call	0xa94	; 0xa94 <mcu_init>

	/* PORT setting on PA2 */

	// Set pin direction to input
	PA2_set_dir(PORT_DIR_IN);
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <PA2_set_dir>

	PA2_set_pull_mode(
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <PA2_set_pull_mode>

	/* PORT setting on PA3 */

	// Set pin direction to output

	EN_set_level(
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	0e 94 ff 04 	call	0x9fe	; 0x9fe <EN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	EN_set_dir(PORT_DIR_OUT);
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <EN_set_dir>

	CLKCTRL_init();
 b5c:	0e 94 6f 03 	call	0x6de	; 0x6de <CLKCTRL_init>

	/* PORT setting on PB3 */

	// Set pin direction to output

	LED1_set_level(
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	0e 94 1d 05 	call	0xa3a	; 0xa3a <LED1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED1_set_dir(PORT_DIR_OUT);
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LED1_set_dir>

	/* PORT setting on PB4 */

	// Set pin direction to output

	LED2_set_level(
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	0e 94 3b 05 	call	0xa76	; 0xa76 <LED2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED2_set_dir(PORT_DIR_OUT);
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	0e 94 2c 05 	call	0xa58	; 0xa58 <LED2_set_dir>
	    false);

	LED3_set_dir(PORT_DIR_OUT);
#endif

	CPUINT_init();
 b78:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <CPUINT_init>

	SLPCTRL_init();
 b7c:	0e 94 ca 05 	call	0xb94	; 0xb94 <SLPCTRL_init>

	BOD_init();
 b80:	0e 94 51 03 	call	0x6a2	; 0x6a2 <BOD_init>
}
 b84:	00 00       	nop
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 b8c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 b8e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 b90:	40 83       	st	Z, r20
	ret                             // Return to caller
 b92:	08 95       	ret

00000b94 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
 b9c:	80 e5       	ldi	r24, 0x50	; 80
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	23 e0       	ldi	r18, 0x03	; 3
 ba2:	fc 01       	movw	r30, r24
 ba4:	20 83       	st	Z, r18
	                | SLPCTRL_SMODE_STDBY_gc; /* Standby Mode */

	return 0;
 ba6:	80 e0       	ldi	r24, 0x00	; 0
}
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	08 95       	ret

00000bae <__cmpsf2>:
 bae:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_cmp>
 bb2:	08 f4       	brcc	.+2      	; 0xbb6 <__cmpsf2+0x8>
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	08 95       	ret

00000bb8 <__fixunssfsi>:
 bb8:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_splitA>
 bbc:	88 f0       	brcs	.+34     	; 0xbe0 <__fixunssfsi+0x28>
 bbe:	9f 57       	subi	r25, 0x7F	; 127
 bc0:	98 f0       	brcs	.+38     	; 0xbe8 <__fixunssfsi+0x30>
 bc2:	b9 2f       	mov	r27, r25
 bc4:	99 27       	eor	r25, r25
 bc6:	b7 51       	subi	r27, 0x17	; 23
 bc8:	b0 f0       	brcs	.+44     	; 0xbf6 <__fixunssfsi+0x3e>
 bca:	e1 f0       	breq	.+56     	; 0xc04 <__fixunssfsi+0x4c>
 bcc:	66 0f       	add	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	1a f0       	brmi	.+6      	; 0xbdc <__fixunssfsi+0x24>
 bd6:	ba 95       	dec	r27
 bd8:	c9 f7       	brne	.-14     	; 0xbcc <__fixunssfsi+0x14>
 bda:	14 c0       	rjmp	.+40     	; 0xc04 <__fixunssfsi+0x4c>
 bdc:	b1 30       	cpi	r27, 0x01	; 1
 bde:	91 f0       	breq	.+36     	; 0xc04 <__fixunssfsi+0x4c>
 be0:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_zero>
 be4:	b1 e0       	ldi	r27, 0x01	; 1
 be6:	08 95       	ret
 be8:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_zero>
 bec:	67 2f       	mov	r22, r23
 bee:	78 2f       	mov	r23, r24
 bf0:	88 27       	eor	r24, r24
 bf2:	b8 5f       	subi	r27, 0xF8	; 248
 bf4:	39 f0       	breq	.+14     	; 0xc04 <__fixunssfsi+0x4c>
 bf6:	b9 3f       	cpi	r27, 0xF9	; 249
 bf8:	cc f3       	brlt	.-14     	; 0xbec <__fixunssfsi+0x34>
 bfa:	86 95       	lsr	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b3 95       	inc	r27
 c02:	d9 f7       	brne	.-10     	; 0xbfa <__fixunssfsi+0x42>
 c04:	3e f4       	brtc	.+14     	; 0xc14 <__fixunssfsi+0x5c>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	08 95       	ret

00000c16 <__fp_cmp>:
 c16:	99 0f       	add	r25, r25
 c18:	00 08       	sbc	r0, r0
 c1a:	55 0f       	add	r21, r21
 c1c:	aa 0b       	sbc	r26, r26
 c1e:	e0 e8       	ldi	r30, 0x80	; 128
 c20:	fe ef       	ldi	r31, 0xFE	; 254
 c22:	16 16       	cp	r1, r22
 c24:	17 06       	cpc	r1, r23
 c26:	e8 07       	cpc	r30, r24
 c28:	f9 07       	cpc	r31, r25
 c2a:	c0 f0       	brcs	.+48     	; 0xc5c <__fp_cmp+0x46>
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	e4 07       	cpc	r30, r20
 c32:	f5 07       	cpc	r31, r21
 c34:	98 f0       	brcs	.+38     	; 0xc5c <__fp_cmp+0x46>
 c36:	62 1b       	sub	r22, r18
 c38:	73 0b       	sbc	r23, r19
 c3a:	84 0b       	sbc	r24, r20
 c3c:	95 0b       	sbc	r25, r21
 c3e:	39 f4       	brne	.+14     	; 0xc4e <__fp_cmp+0x38>
 c40:	0a 26       	eor	r0, r26
 c42:	61 f0       	breq	.+24     	; 0xc5c <__fp_cmp+0x46>
 c44:	23 2b       	or	r18, r19
 c46:	24 2b       	or	r18, r20
 c48:	25 2b       	or	r18, r21
 c4a:	21 f4       	brne	.+8      	; 0xc54 <__fp_cmp+0x3e>
 c4c:	08 95       	ret
 c4e:	0a 26       	eor	r0, r26
 c50:	09 f4       	brne	.+2      	; 0xc54 <__fp_cmp+0x3e>
 c52:	a1 40       	sbci	r26, 0x01	; 1
 c54:	a6 95       	lsr	r26
 c56:	8f ef       	ldi	r24, 0xFF	; 255
 c58:	81 1d       	adc	r24, r1
 c5a:	81 1d       	adc	r24, r1
 c5c:	08 95       	ret

00000c5e <__fp_split3>:
 c5e:	57 fd       	sbrc	r21, 7
 c60:	90 58       	subi	r25, 0x80	; 128
 c62:	44 0f       	add	r20, r20
 c64:	55 1f       	adc	r21, r21
 c66:	59 f0       	breq	.+22     	; 0xc7e <__fp_splitA+0x10>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	71 f0       	breq	.+28     	; 0xc88 <__fp_splitA+0x1a>
 c6c:	47 95       	ror	r20

00000c6e <__fp_splitA>:
 c6e:	88 0f       	add	r24, r24
 c70:	97 fb       	bst	r25, 7
 c72:	99 1f       	adc	r25, r25
 c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_splitA+0x20>
 c76:	9f 3f       	cpi	r25, 0xFF	; 255
 c78:	79 f0       	breq	.+30     	; 0xc98 <__fp_splitA+0x2a>
 c7a:	87 95       	ror	r24
 c7c:	08 95       	ret
 c7e:	12 16       	cp	r1, r18
 c80:	13 06       	cpc	r1, r19
 c82:	14 06       	cpc	r1, r20
 c84:	55 1f       	adc	r21, r21
 c86:	f2 cf       	rjmp	.-28     	; 0xc6c <__fp_split3+0xe>
 c88:	46 95       	lsr	r20
 c8a:	f1 df       	rcall	.-30     	; 0xc6e <__fp_splitA>
 c8c:	08 c0       	rjmp	.+16     	; 0xc9e <__fp_splitA+0x30>
 c8e:	16 16       	cp	r1, r22
 c90:	17 06       	cpc	r1, r23
 c92:	18 06       	cpc	r1, r24
 c94:	99 1f       	adc	r25, r25
 c96:	f1 cf       	rjmp	.-30     	; 0xc7a <__fp_splitA+0xc>
 c98:	86 95       	lsr	r24
 c9a:	71 05       	cpc	r23, r1
 c9c:	61 05       	cpc	r22, r1
 c9e:	08 94       	sec
 ca0:	08 95       	ret

00000ca2 <__fp_zero>:
 ca2:	e8 94       	clt

00000ca4 <__fp_szero>:
 ca4:	bb 27       	eor	r27, r27
 ca6:	66 27       	eor	r22, r22
 ca8:	77 27       	eor	r23, r23
 caa:	cb 01       	movw	r24, r22
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__gesf2>:
 cb0:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_cmp>
 cb4:	08 f4       	brcc	.+2      	; 0xcb8 <__gesf2+0x8>
 cb6:	8f ef       	ldi	r24, 0xFF	; 255
 cb8:	08 95       	ret

00000cba <__mulsf3>:
 cba:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3x>
 cbe:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 cc2:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 cc6:	38 f0       	brcs	.+14     	; 0xcd6 <__mulsf3+0x1c>
 cc8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__mulsf3+0x1c>
 cce:	95 23       	and	r25, r21
 cd0:	11 f0       	breq	.+4      	; 0xcd6 <__mulsf3+0x1c>
 cd2:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 cd6:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 cda:	11 24       	eor	r1, r1
 cdc:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_szero>

00000ce0 <__mulsf3x>:
 ce0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fp_split3>
 ce4:	70 f3       	brcs	.-36     	; 0xcc2 <__mulsf3+0x8>

00000ce6 <__mulsf3_pse>:
 ce6:	95 9f       	mul	r25, r21
 ce8:	c1 f3       	breq	.-16     	; 0xcda <__mulsf3+0x20>
 cea:	95 0f       	add	r25, r21
 cec:	50 e0       	ldi	r21, 0x00	; 0
 cee:	55 1f       	adc	r21, r21
 cf0:	62 9f       	mul	r22, r18
 cf2:	f0 01       	movw	r30, r0
 cf4:	72 9f       	mul	r23, r18
 cf6:	bb 27       	eor	r27, r27
 cf8:	f0 0d       	add	r31, r0
 cfa:	b1 1d       	adc	r27, r1
 cfc:	63 9f       	mul	r22, r19
 cfe:	aa 27       	eor	r26, r26
 d00:	f0 0d       	add	r31, r0
 d02:	b1 1d       	adc	r27, r1
 d04:	aa 1f       	adc	r26, r26
 d06:	64 9f       	mul	r22, r20
 d08:	66 27       	eor	r22, r22
 d0a:	b0 0d       	add	r27, r0
 d0c:	a1 1d       	adc	r26, r1
 d0e:	66 1f       	adc	r22, r22
 d10:	82 9f       	mul	r24, r18
 d12:	22 27       	eor	r18, r18
 d14:	b0 0d       	add	r27, r0
 d16:	a1 1d       	adc	r26, r1
 d18:	62 1f       	adc	r22, r18
 d1a:	73 9f       	mul	r23, r19
 d1c:	b0 0d       	add	r27, r0
 d1e:	a1 1d       	adc	r26, r1
 d20:	62 1f       	adc	r22, r18
 d22:	83 9f       	mul	r24, r19
 d24:	a0 0d       	add	r26, r0
 d26:	61 1d       	adc	r22, r1
 d28:	22 1f       	adc	r18, r18
 d2a:	74 9f       	mul	r23, r20
 d2c:	33 27       	eor	r19, r19
 d2e:	a0 0d       	add	r26, r0
 d30:	61 1d       	adc	r22, r1
 d32:	23 1f       	adc	r18, r19
 d34:	84 9f       	mul	r24, r20
 d36:	60 0d       	add	r22, r0
 d38:	21 1d       	adc	r18, r1
 d3a:	82 2f       	mov	r24, r18
 d3c:	76 2f       	mov	r23, r22
 d3e:	6a 2f       	mov	r22, r26
 d40:	11 24       	eor	r1, r1
 d42:	9f 57       	subi	r25, 0x7F	; 127
 d44:	50 40       	sbci	r21, 0x00	; 0
 d46:	9a f0       	brmi	.+38     	; 0xd6e <__mulsf3_pse+0x88>
 d48:	f1 f0       	breq	.+60     	; 0xd86 <__mulsf3_pse+0xa0>
 d4a:	88 23       	and	r24, r24
 d4c:	4a f0       	brmi	.+18     	; 0xd60 <__mulsf3_pse+0x7a>
 d4e:	ee 0f       	add	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	bb 1f       	adc	r27, r27
 d54:	66 1f       	adc	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	91 50       	subi	r25, 0x01	; 1
 d5c:	50 40       	sbci	r21, 0x00	; 0
 d5e:	a9 f7       	brne	.-22     	; 0xd4a <__mulsf3_pse+0x64>
 d60:	9e 3f       	cpi	r25, 0xFE	; 254
 d62:	51 05       	cpc	r21, r1
 d64:	80 f0       	brcs	.+32     	; 0xd86 <__mulsf3_pse+0xa0>
 d66:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 d6a:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_szero>
 d6e:	5f 3f       	cpi	r21, 0xFF	; 255
 d70:	e4 f3       	brlt	.-8      	; 0xd6a <__mulsf3_pse+0x84>
 d72:	98 3e       	cpi	r25, 0xE8	; 232
 d74:	d4 f3       	brlt	.-12     	; 0xd6a <__mulsf3_pse+0x84>
 d76:	86 95       	lsr	r24
 d78:	77 95       	ror	r23
 d7a:	67 95       	ror	r22
 d7c:	b7 95       	ror	r27
 d7e:	f7 95       	ror	r31
 d80:	e7 95       	ror	r30
 d82:	9f 5f       	subi	r25, 0xFF	; 255
 d84:	c1 f7       	brne	.-16     	; 0xd76 <__mulsf3_pse+0x90>
 d86:	fe 2b       	or	r31, r30
 d88:	88 0f       	add	r24, r24
 d8a:	91 1d       	adc	r25, r1
 d8c:	96 95       	lsr	r25
 d8e:	87 95       	ror	r24
 d90:	97 f9       	bld	r25, 7
 d92:	08 95       	ret

00000d94 <__fp_inf>:
 d94:	97 f9       	bld	r25, 7
 d96:	9f 67       	ori	r25, 0x7F	; 127
 d98:	80 e8       	ldi	r24, 0x80	; 128
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	08 95       	ret

00000da0 <__fp_nan>:
 da0:	9f ef       	ldi	r25, 0xFF	; 255
 da2:	80 ec       	ldi	r24, 0xC0	; 192
 da4:	08 95       	ret

00000da6 <__fp_pscA>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	18 06       	cpc	r1, r24
 db0:	09 06       	cpc	r0, r25
 db2:	08 95       	ret

00000db4 <__fp_pscB>:
 db4:	00 24       	eor	r0, r0
 db6:	0a 94       	dec	r0
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	05 06       	cpc	r0, r21
 dc0:	08 95       	ret

00000dc2 <__fp_round>:
 dc2:	09 2e       	mov	r0, r25
 dc4:	03 94       	inc	r0
 dc6:	00 0c       	add	r0, r0
 dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0xc>
 dca:	88 23       	and	r24, r24
 dcc:	52 f0       	brmi	.+20     	; 0xde2 <__fp_round+0x20>
 dce:	bb 0f       	add	r27, r27
 dd0:	40 f4       	brcc	.+16     	; 0xde2 <__fp_round+0x20>
 dd2:	bf 2b       	or	r27, r31
 dd4:	11 f4       	brne	.+4      	; 0xdda <__fp_round+0x18>
 dd6:	60 ff       	sbrs	r22, 0
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__fp_round+0x20>
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <_exit>:
 de4:	f8 94       	cli

00000de6 <__stop_program>:
 de6:	ff cf       	rjmp	.-2      	; 0xde6 <__stop_program>
